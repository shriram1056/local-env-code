{"ast":null,"code":"import { cacheExchange } from '@urql/exchange-graphcache';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\n\nvar errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error) {\n        sentryFireAndForgetHere();\n      }\n    }));\n  };\n};\n\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: 'http://localhost:4000/graphql',\n    fetchOptions: {\n      credentials: 'include' // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n      //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      updates: {\n        Mutation: {\n          login: function login(_result, args, cache, info) {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, // the query to be updated\n            _result, function (result, query) {\n              // we are just defining the function here\n              //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          logout: function logout(_result, args, cache, info) {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, // the query to be updated\n            _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, // the query to be updated\n            _result, function (result, query) {\n              if (result.register.errors) {\n                return query; // if not register then return the current me query\n              } else {\n                return {\n                  me: result.register.user // user and errors are in mutation check it.\n                  // the user field in mutation is the same as me query\n\n                };\n              }\n            });\n          }\n        }\n      }\n    }), ssrExchange, fetchExchange]\n  };\n}; ///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","MeDocument","betterUpdateQuery","errorExchange","forward","ops$","pipe","tap","error","sentryFireAndForgetHere","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","login","_result","args","cache","info","query","result","errors","me","user","logout","register"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,MAA7C;AACA,SAGEC,UAHF,QAMO,sBANP;AAOA,SAASC,iBAAT,QAAkC,qBAAlC;;AAEA,IAAMC,aAAuB,GAAG,SAA1BA,aAA0B;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,SAAiB,UAACC,IAAD,EAAU;AACzD,WAAOC,IAAI,CACTF,OAAO,CAACC,IAAD,CADE,EAETE,GAAG,CAAC,iBAAe;AAAA,UAAZC,KAAY,SAAZA,KAAY;;AACjB,UAAIA,KAAJ,EAAW;AACTC,QAAAA,uBAAuB;AACxB;AACF,KAJE,CAFM,CAAX;AAQD,GAT+B;AAAA,CAAhC;;AAUA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,WAAD;AAAA,SAAuB;AACrDC,IAAAA,GAAG,EAAE,+BADgD;AAErDC,IAAAA,YAAY,EAAE;AACZC,MAAAA,WAAW,EAAE,SADD,CACqB;AACjC;;AAFY,KAFuC;AAMrDC,IAAAA,SAAS,EAAE,CACThB,aADS,EAETD,aAAa,CAAC;AACZkB,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,KAAK,EAAE,eAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACrC;AACApB,YAAAA,iBAAiB,CACfmB,KADe,EAEf;AAAEE,cAAAA,KAAK,EAAEtB;AAAT,aAFe,EAEQ;AACvBkB,YAAAA,OAHe,EAIf,UAACK,MAAD,EAASD,KAAT,EAAmB;AACjB;AACA;AACA,kBAAIC,MAAM,CAACN,KAAP,CAAaO,MAAjB,EAAyB;AACvB,uBAAOF,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLG,kBAAAA,EAAE,EAAEF,MAAM,CAACN,KAAP,CAAaS;AADZ,iBAAP;AAGD;AACF,aAdc,CAAjB;AAgBD,WAnBO;AAoBRC,UAAAA,MAAM,EAAE,gBAACT,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACtC;AACApB,YAAAA,iBAAiB,CACfmB,KADe,EAEf;AAAEE,cAAAA,KAAK,EAAEtB;AAAT,aAFe,EAEQ;AACvBkB,YAAAA,OAHe,EAIf,YAAM;AACJ,qBAAO;AACLO,gBAAAA,EAAE,EAAE;AADC,eAAP;AAGD,aARc,CAAjB;AAUD,WAhCO;AAiCRG,UAAAA,QAAQ,EAAE,kBAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACxCpB,YAAAA,iBAAiB,CACfmB,KADe,EAEf;AAAEE,cAAAA,KAAK,EAAEtB;AAAT,aAFe,EAEQ;AACvBkB,YAAAA,OAHe,EAIf,UAACK,MAAD,EAASD,KAAT,EAAmB;AACjB,kBAAIC,MAAM,CAACK,QAAP,CAAgBJ,MAApB,EAA4B;AAC1B,uBAAOF,KAAP,CAD0B,CACb;AACd,eAFD,MAEO;AACL,uBAAO;AACLG,kBAAAA,EAAE,EAAEF,MAAM,CAACK,QAAP,CAAgBF,IADf,CACqB;AAC1B;;AAFK,iBAAP;AAID;AACF,aAbc,CAAjB;AAeD;AAjDO;AADH;AADG,KAAD,CAFJ,EAyDThB,WAzDS,EA0DTX,aA1DS;AAN0C,GAAvB;AAAA,CAAzB,C,CAmEP;AACA;AAEA","sourcesContent":["import { cacheExchange } from '@urql/exchange-graphcache'\nimport { dedupExchange, fetchExchange } from 'urql'\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n} from '../generated/graphql'\nimport { betterUpdateQuery } from './betterUpdateQuery'\n\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error) {\n        sentryFireAndForgetHere()\n      }\n    })\n  )\n}\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' as const, // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              (result, query) => {\n                // we are just defining the function here\n                //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n                if (result.login.errors) {\n                  return query\n                } else {\n                  return {\n                    me: result.login.user,\n                  }\n                }\n              }\n            )\n          },\n          logout: (_result, args, cache, info) => {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              () => {\n                return {\n                  me: null,\n                }\n              }\n            )\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query // if not register then return the current me query\n                } else {\n                  return {\n                    me: result.register.user, // user and errors are in mutation check it.\n                    // the user field in mutation is the same as me query\n                  }\n                }\n              }\n            )\n          },\n        },\n      },\n    }),\n    ssrExchange,\n    fetchExchange,\n  ],\n})\n///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain\n"]},"metadata":{},"sourceType":"module"}