{"ast":null,"code":"import _defineProperty from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/lireddit/lireddit-web/src/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ChakraProvider, ColorModeProvider } from '@chakra-ui/react';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport React from 'react';\nimport { createClient, dedupExchange, fetchExchange, Provider } from 'urql';\nimport theme from '../theme';\nvar client = createClient({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' // this is needed for server to send the cookie along with every request.\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n\n  },\n  exchanges: [dedupExchange, cacheExchange({}), fetchExchange]\n}); //point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain.\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: client,\n    children: /*#__PURE__*/_jsxDEV(ChakraProvider, {\n      resetCSS: true,\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(ColorModeProvider, {\n        options: {\n          useSystemColorMode: true\n        },\n        children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/pages/_app.tsx"],"names":["ChakraProvider","ColorModeProvider","cacheExchange","React","createClient","dedupExchange","fetchExchange","Provider","theme","client","url","fetchOptions","credentials","exchanges","MyApp","Component","pageProps","useSystemColorMode"],"mappings":";;;;;;;;AAAA,SAASA,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,aAAtC,EAAqDC,QAArD,QAAqE,MAArE;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,IAAMC,MAAM,GAAGL,YAAY,CAAC;AAC1BM,EAAAA,GAAG,EAAE,+BADqB;AAE1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE,SADD,CACY;AAExB;;AAHY,GAFY;AAO1BC,EAAAA,SAAS,EAAE,CAACR,aAAD,EAAgBH,aAAa,CAAC,EAAD,CAA7B,EAAmCI,aAAnC;AAPe,CAAD,CAA3B,C,CAQG;AACH;AAEA;;AAEA,SAASQ,KAAT,OAAyC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACvC,sBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEP,MAAjB;AAAA,2BACE,QAAC,cAAD;AAAgB,MAAA,QAAQ,MAAxB;AAAyB,MAAA,KAAK,EAAED,KAAhC;AAAA,6BACE,QAAC,iBAAD;AACE,QAAA,OAAO,EAAE;AACPS,UAAAA,kBAAkB,EAAE;AADb,SADX;AAAA,+BAKE,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;KAdQF,K;AAgBT,eAAeA,KAAf","sourcesContent":["import { ChakraProvider, ColorModeProvider } from '@chakra-ui/react'\nimport { cacheExchange } from '@urql/exchange-graphcache'\nimport React from 'react'\nimport { createClient, dedupExchange, fetchExchange, Provider } from 'urql'\nimport theme from '../theme'\n\nconst client = createClient({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include', // this is needed for server to send the cookie along with every request.\n\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n  },\n  exchanges: [dedupExchange, cacheExchange({}), fetchExchange],\n}) //point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain.\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <Provider value={client}>\n      <ChakraProvider resetCSS theme={theme}>\n        <ColorModeProvider\n          options={{\n            useSystemColorMode: true,\n          }}\n        >\n          <Component {...pageProps} />\n        </ColorModeProvider>\n      </ChakraProvider>\n    </Provider>\n  )\n}\n\nexport default MyApp\n"]},"metadata":{},"sourceType":"module"}