{"ast":null,"code":"//the result of queries will be cached and they won't be able to react to mutations result. here me query depend on login mutation.\nexport function betterUpdateQuery(cache, qi, result, fn) // r: mutation object      q: query object\n{\n  return cache.updateQuery(qi, function (data) {\n    return fn(result, data);\n  }); //updateQuery() can be used to update the data of a given query using an updater function.\n  //data:  The updater function receives the query data as its' only argument and must return the updated version of said data.\n}","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/pages/betterUpdateQuery.tsx"],"names":["betterUpdateQuery","cache","qi","result","fn","updateQuery","data"],"mappings":"AAEA;AACA,OAAO,SAASA,iBAAT,CACLC,KADK,EAELC,EAFK,EAGLC,MAHK,EAILC,EAJK,EAI8B;AACnC;AACA,SAAOH,KAAK,CAACI,WAAN,CAAkBH,EAAlB,EAAsB,UAACI,IAAD;AAAA,WAAUF,EAAE,CAACD,MAAD,EAASG,IAAT,CAAZ;AAAA,GAAtB,CAAP,CADA,CACuE;AAEvE;AACD","sourcesContent":["import { Cache, QueryInput } from '@urql/exchange-graphcache'\n\n//the result of queries will be cached and they won't be able to react to mutations result. here me query depend on login mutation.\nexport function betterUpdateQuery<Result, Query>(\n  cache: Cache,\n  qi: QueryInput,\n  result: any,\n  fn: (r: Result, q: Query) => Query // r: mutation object      q: query object\n) {\n  return cache.updateQuery(qi, (data) => fn(result, data as any) as any) //updateQuery() can be used to update the data of a given query using an updater function.\n\n  //data:  The updater function receives the query data as its' only argument and must return the updated version of said data.\n}\n"]},"metadata":{},"sourceType":"module"}