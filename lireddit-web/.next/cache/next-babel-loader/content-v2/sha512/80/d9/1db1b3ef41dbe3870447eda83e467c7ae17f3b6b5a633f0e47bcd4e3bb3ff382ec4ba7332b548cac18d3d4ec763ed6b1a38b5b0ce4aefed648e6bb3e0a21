{"ast":null,"code":"import { cacheExchange } from '@urql/exchange-graphcache';\nimport Router from 'next/router';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery'; // this is a global handler for errors\n\nvar errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error !== null && error !== void 0 && error.message.includes('not authenticated')) {\n        Router.replace('/login'); // this replace the current route\n      }\n    }));\n  };\n};\n\nexport var cursorPagination = function cursorPagination() {\n  return function (_parent, fieldArgs, cache, info) {\n    var entityKey = info.parentKey,\n        fieldName = info.fieldName; // entity key - query, fieldName is posts\n\n    console.log(entityKey, fieldName);\n    var allFields = cache.inspectFields(entityKey); // all field in the entity key\n\n    var fieldInfos = allFields.filter(function (info) {\n      return info.fieldName === fieldName;\n    });\n    var size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    } // const visited = new Set()\n    // let result: NullArray<string> = []\n    // let prevOffset: number | null = null\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i]\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue\n    //   }\n    //   const links = cache.resolve(entityKey, fieldKey) as string[]\n    //   const currentOffset = args[offsetArgument]\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue\n    //   }\n    //   const tempResult: NullArray<string> = []\n    //   for (let j = 0; j < links.length; j++) {\n    //     const link = links[j]\n    //     if (visited.has(link)) continue\n    //     tempResult.push(link)\n    //     visited.add(link)\n    //   }\n    //   if (\n    //     (!prevOffset || currentOffset > prevOffset) ===\n    //     (mergeMode === 'after')\n    //   ) {\n    //     result = [...result, ...tempResult]\n    //   } else {\n    //     result = [...tempResult, ...result]\n    //   }\n    //   prevOffset = currentOffset\n    // }\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs)\n    // if (hasCurrentPage) {\n    //   return result\n    // } else if (!(info as any).store.schema) {\n    //   return undefined\n    // } else {\n    //   info.partial = true\n    //   return result\n    // }\n\n  };\n};\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: 'http://localhost:4000/graphql',\n    fetchOptions: {\n      credentials: 'include' // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n      //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      resolvers: {\n        // this runs every time the query is run.\n        Query: {\n          posts: cursorPagination()\n        }\n      },\n      updates: {\n        Mutation: {\n          login: function login(_result, args, cache, info) {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, // the query to be updated\n            _result, function (result, query) {\n              // we are just defining the function here\n              //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          logout: function logout(_result, args, cache, info) {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, // the query to be updated\n            _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, // the query to be updated\n            _result, function (result, query) {\n              if (result.register.errors) {\n                return query; // if not register then return the current me query\n              } else {\n                return {\n                  me: result.register.user // user and errors are in mutation check it.\n                  // the user field in mutation is the same as me query\n\n                };\n              }\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n}; ///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","Router","dedupExchange","fetchExchange","pipe","tap","MeDocument","betterUpdateQuery","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","entityKey","parentKey","fieldName","console","log","allFields","inspectFields","fieldInfos","filter","size","length","undefined","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","resolvers","Query","posts","updates","Mutation","login","_result","args","query","result","errors","me","user","logout","register"],"mappings":"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","sourcesContent":["import { cacheExchange, Resolver } from '@urql/exchange-graphcache'\nimport Router from 'next/router'\nimport { dedupExchange, Exchange, fetchExchange } from 'urql'\nimport { pipe, tap } from 'wonka'\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n} from '../generated/graphql'\nimport { betterUpdateQuery } from './betterUpdateQuery'\n\n// this is a global handler for errors\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/login') // this replace the current route\n      }\n    })\n  )\n}\n\nexport const cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info\n    // entity key - query, fieldName is posts\n    console.log(entityKey, fieldName)\n    const allFields = cache.inspectFields(entityKey) // all field in the entity key\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName)\n    const size = fieldInfos.length\n    if (size === 0) {\n      return undefined\n    }\n\n    // const visited = new Set()\n    // let result: NullArray<string> = []\n    // let prevOffset: number | null = null\n\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i]\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue\n    //   }\n\n    //   const links = cache.resolve(entityKey, fieldKey) as string[]\n    //   const currentOffset = args[offsetArgument]\n\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue\n    //   }\n\n    //   const tempResult: NullArray<string> = []\n\n    //   for (let j = 0; j < links.length; j++) {\n    //     const link = links[j]\n    //     if (visited.has(link)) continue\n    //     tempResult.push(link)\n    //     visited.add(link)\n    //   }\n\n    //   if (\n    //     (!prevOffset || currentOffset > prevOffset) ===\n    //     (mergeMode === 'after')\n    //   ) {\n    //     result = [...result, ...tempResult]\n    //   } else {\n    //     result = [...tempResult, ...result]\n    //   }\n\n    //   prevOffset = currentOffset\n    // }\n\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs)\n    // if (hasCurrentPage) {\n    //   return result\n    // } else if (!(info as any).store.schema) {\n    //   return undefined\n    // } else {\n    //   info.partial = true\n    //   return result\n    // }\n  }\n}\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' as const, // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      resolvers: {\n        // this runs every time the query is run.\n        Query: {\n          posts: cursorPagination(),\n        },\n      },\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              (result, query) => {\n                // we are just defining the function here\n                //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n                if (result.login.errors) {\n                  return query\n                } else {\n                  return {\n                    me: result.login.user,\n                  }\n                }\n              }\n            )\n          },\n          logout: (_result, args, cache, info) => {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              () => {\n                return {\n                  me: null,\n                }\n              }\n            )\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query // if not register then return the current me query\n                } else {\n                  return {\n                    me: result.register.user, // user and errors are in mutation check it.\n                    // the user field in mutation is the same as me query\n                  }\n                }\n              }\n            )\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n})\n///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain\n"]},"metadata":{},"sourceType":"module"}