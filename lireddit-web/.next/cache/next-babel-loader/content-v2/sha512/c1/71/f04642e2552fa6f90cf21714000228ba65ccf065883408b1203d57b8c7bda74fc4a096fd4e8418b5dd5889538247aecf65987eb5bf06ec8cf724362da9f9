{"ast":null,"code":"import { cacheExchange } from '@urql/exchange-graphcache';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport { dedupExchange, fetchExchange, stringifyVariables } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery'; // this is a global handler for errors\n\nconst errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error !== null && error !== void 0 && error.message.includes('not authenticated')) {\n      Router.replace('/login'); // this replace the current route\n    }\n  }));\n};\n\nexport const cursorPagination = () => {\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info; // entity key - Query, fieldName is posts. info- info about the query in resolver\n\n    const allFields = cache.inspectFields(entityKey); //all the queires that run and are cached\n\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName); // we are finding the query cache that matches with the query in resolver\n\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`; // stringifyVariables- change the args to json like stuff\n\n    const isItInTheCache = cache.resolve(entityKey, fieldKey); // console.log(isItInTheCache)\n\n    info.partial = !isItInTheCache; //here if there is nothing in cache then do call the query with new paramater\n    //partial: to indicate that some data is uncached and missing.\n\n    let hasMore = true;\n    const results = [];\n    fieldInfos.forEach(fi => {\n      const key = cache.resolve(entityKey, fi.fieldKey); // to get all queries from cache\n\n      const _hasMore = cache.resolve(key, 'hasMore');\n\n      const data = cache.resolve(key, 'posts');\n\n      if (!_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push(...data); //this destructure the string array\n    });\n    return {\n      __typename: 'PaginatedPosts',\n      // type returned\n      hasMore,\n      posts: results\n    }; // this pagination stores each load more in array\n  };\n};\nexport const createUrqlClient = ssrExchange => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    keys: {\n      PaginatedPosts: () => null // ERROR:You have to request `id` or `_id` fields for all selection sets or create a custom `keys` config for `PaginatedPosts`.\n      // Entities without keys will be embedded directly on the parent entity.\n      //If this is intentional, create a `keys` config for `PaginatedPosts` that always returns null.\n\n    },\n    resolvers: {\n      // this runs every time the query is run.\n      Query: {\n        posts: cursorPagination()\n      }\n    },\n    updates: {\n      Mutation: {\n        vote: (_result, args, cache, info) => {\n          // we are updating points in post in ui\n          const {\n            postid,\n            value\n          } = args;\n          const data = cache.readFragment(gql`\n                fragment _ on Post {\n                  id\n                  points\n                  voteStatus\n                }\n              `, {\n            id: postid\n          });\n\n          if (data) {\n            // don't update the cache if if the same button isclicked\n            if (data.voteStatus === value) {\n              console.log('def');\n              return;\n            }\n\n            const newPoints = data.points + (!data.voteStatus ? 1 : 2) * value; // the default of vote status is null if null use 1 else 2\n\n            cache.writeFragment(gql`\n                  fragment __ on Post {\n                    points\n                    voteStatus\n                  }\n                `, {\n              id: postid,\n              points: newPoints,\n              voteStatus: value\n            });\n          }\n        },\n        createPost: (_result, args, cache, info) => {\n          // ALTERNATIVE FOR CACHE EXCHANGE BELOW\n          const allFields = cache.inspectFields('Query');\n          const fieldInfos = allFields.filter(info => info.fieldName === 'posts');\n          fieldInfos.forEach(fi => {\n            cache.invalidate('Query', 'posts', fi.arguments || {});\n          }); // we are invalidating all the posts in cache as if you have clicked load more 3 times then created a post, you will be redirected to the cached pafge and not the reloaded page. so old post show up at top and updated post at the bottom\n        },\n        login: (_result, args, cache, info) => {\n          // result is the complete data of login mutation. this is used in replacement of Query me's data\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, // the query to be updated\n          _result, (result, query) => {\n            // we are just defining the function here\n            //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        logout: (_result, args, cache, info) => {\n          // result is the complete data of login mutation. this is used in replacement of Query me's data\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, // the query to be updated\n          _result, () => {\n            return {\n              me: null\n            };\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, // the query to be updated\n          _result, (result, query) => {\n            if (result.register.errors) {\n              return query; // if not register then return the current me query\n            } else {\n              return {\n                me: result.register.user // user and errors are in mutation check it.\n                // the user field in mutation is the same as me query\n\n              };\n            }\n          });\n        }\n      }\n    }\n  }), errorExchange, ssrExchange, // server side render\n  fetchExchange]\n}); ///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain\n//resolvers\n// A nested mapping of resolvers, which are used to override the record or entity that Graphcache resolves for a given field for a type.\n// updates\n// A nested mapping of updater functions for mutation and subscription fields, which may be used to add side-effects that update other parts of the cache when the given subscription or mutation field is written to the cache.","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","gql","Router","dedupExchange","fetchExchange","stringifyVariables","pipe","tap","MeDocument","betterUpdateQuery","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","isItInTheCache","resolve","partial","hasMore","results","forEach","fi","key","_hasMore","data","push","__typename","posts","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","keys","PaginatedPosts","resolvers","Query","updates","Mutation","vote","_result","args","postid","value","readFragment","id","voteStatus","console","log","newPoints","points","writeFragment","createPost","invalidate","arguments","login","query","result","errors","me","user","logout","register"],"mappings":"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","sourcesContent":["import { cacheExchange, Resolver } from '@urql/exchange-graphcache'\nimport gql from 'graphql-tag'\nimport Router from 'next/router'\nimport {\n  dedupExchange,\n  Exchange,\n  fetchExchange,\n  stringifyVariables,\n} from 'urql'\nimport { pipe, tap } from 'wonka'\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n  VoteMutationVariables,\n} from '../generated/graphql'\nimport { betterUpdateQuery } from './betterUpdateQuery'\n\n// this is a global handler for errors\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/login') // this replace the current route\n      }\n    })\n  )\n}\n\nexport const cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info\n    // entity key - Query, fieldName is posts. info- info about the query in resolver\n\n    const allFields = cache.inspectFields(entityKey) //all the queires that run and are cached\n\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName) // we are finding the query cache that matches with the query in resolver\n\n    const size = fieldInfos.length\n    if (size === 0) {\n      return undefined\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`\n    // stringifyVariables- change the args to json like stuff\n\n    const isItInTheCache = cache.resolve(entityKey, fieldKey)\n    // console.log(isItInTheCache)\n    info.partial = !isItInTheCache\n    //here if there is nothing in cache then do call the query with new paramater\n    //partial: to indicate that some data is uncached and missing.\n\n    let hasMore = true\n    const results: string[] = []\n    fieldInfos.forEach((fi) => {\n      const key = cache.resolve(entityKey, fi.fieldKey) as string // to get all queries from cache\n      const _hasMore = cache.resolve(key, 'hasMore')\n      const data = cache.resolve(key, 'posts') as string[]\n      if (!_hasMore) {\n        hasMore = _hasMore as boolean\n      }\n      results.push(...data) //this destructure the string array\n    })\n\n    return {\n      __typename: 'PaginatedPosts', // type returned\n      hasMore,\n      posts: results,\n    }\n    // this pagination stores each load more in array\n  }\n}\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' as const, // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      keys: {\n        PaginatedPosts: () => null,\n        // ERROR:You have to request `id` or `_id` fields for all selection sets or create a custom `keys` config for `PaginatedPosts`.\n        // Entities without keys will be embedded directly on the parent entity.\n        //If this is intentional, create a `keys` config for `PaginatedPosts` that always returns null.\n      },\n      resolvers: {\n        // this runs every time the query is run.\n        Query: {\n          posts: cursorPagination(),\n        },\n      },\n      updates: {\n        Mutation: {\n          vote: (_result, args, cache, info) => {\n            // we are updating points in post in ui\n            const { postid, value } = args as VoteMutationVariables\n            const data = cache.readFragment(\n              gql`\n                fragment _ on Post {\n                  id\n                  points\n                  voteStatus\n                }\n              `,\n              { id: postid } as any\n            )\n\n            if (data) {\n              // don't update the cache if if the same button isclicked\n              if (data.voteStatus === value) {\n                console.log('def')\n                return\n              }\n              const newPoints =\n                (data.points as number) + (!data.voteStatus ? 1 : 2) * value // the default of vote status is null if null use 1 else 2\n              cache.writeFragment(\n                gql`\n                  fragment __ on Post {\n                    points\n                    voteStatus\n                  }\n                `,\n                { id: postid, points: newPoints, voteStatus: value } as any\n              )\n            }\n          },\n          createPost: (_result, args, cache, info) => {\n            // ALTERNATIVE FOR CACHE EXCHANGE BELOW\n            const allFields = cache.inspectFields('Query')\n            const fieldInfos = allFields.filter(\n              (info) => info.fieldName === 'posts'\n            )\n            fieldInfos.forEach((fi) => {\n              cache.invalidate('Query', 'posts', fi.arguments || {})\n            })\n            // we are invalidating all the posts in cache as if you have clicked load more 3 times then created a post, you will be redirected to the cached pafge and not the reloaded page. so old post show up at top and updated post at the bottom\n          },\n          login: (_result, args, cache, info) => {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              (result, query) => {\n                // we are just defining the function here\n                //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n                if (result.login.errors) {\n                  return query\n                } else {\n                  return {\n                    me: result.login.user,\n                  }\n                }\n              }\n            )\n          },\n          logout: (_result, args, cache, info) => {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              () => {\n                return {\n                  me: null,\n                }\n              }\n            )\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query // if not register then return the current me query\n                } else {\n                  return {\n                    me: result.register.user, // user and errors are in mutation check it.\n                    // the user field in mutation is the same as me query\n                  }\n                }\n              }\n            )\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange, // server side render\n    fetchExchange,\n  ],\n})\n///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain\n\n//resolvers\n// A nested mapping of resolvers, which are used to override the record or entity that Graphcache resolves for a given field for a type.\n\n// updates\n// A nested mapping of updater functions for mutation and subscription fields, which may be used to add side-effects that update other parts of the cache when the given subscription or mutation field is written to the cache.\n"]},"metadata":{},"sourceType":"module"}