{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/lireddit/lireddit-web/src/pages/post/edit/[id].tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Button } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { InputField } from '../../../components/inputField';\nimport { Layout } from '../../../components/Layout';\nimport { usePostQuery, useUpdatePostMutation } from '../../../generated/graphql';\nimport { useGetIntId } from '../../../utils/useGetIntId';\nimport { withApollo } from '../../../utils/withApollo';\n\nconst EditPost = ({}) => {\n  const router = useRouter();\n  const intId = useGetIntId(); // return -1 if there is route is not valid string\n\n  const {\n    data,\n    loading\n  } = usePostQuery({\n    skip: intId === -1,\n    variables: {\n      id: intId\n    }\n  });\n  const [updatePost] = useUpdatePostMutation();\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (!(data !== null && data !== void 0 && data.post)) {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: \"could not find post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        title: data.post.title,\n        text: data.post.text\n      },\n      onSubmit: async values => {\n        await updatePost({\n          variables: _objectSpread({\n            id: intId\n          }, values)\n        });\n        router.back(); // back to previous in stack\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          name: \"title\",\n          placeholder: \"title\",\n          label: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            textarea: true,\n            name: \"text\",\n            placeholder: \"text...\",\n            label: \"Body\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          mt: 4,\n          type: \"submit\",\n          colorScheme: \"teal\",\n          isLoading: isSubmitting,\n          children: \"update post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withApollo({\n  ssr: false\n})(EditPost);","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/pages/post/edit/[id].tsx"],"names":["Box","Button","Form","Formik","useRouter","React","InputField","Layout","usePostQuery","useUpdatePostMutation","useGetIntId","withApollo","EditPost","router","intId","data","loading","skip","variables","id","updatePost","post","title","text","values","back","isSubmitting","ssr"],"mappings":"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","sourcesContent":["import { Box, Button } from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport { useRouter } from 'next/router'\nimport React from 'react'\nimport { InputField } from '../../../components/inputField'\nimport { Layout } from '../../../components/Layout'\nimport { usePostQuery, useUpdatePostMutation } from '../../../generated/graphql'\nimport { useGetIntId } from '../../../utils/useGetIntId'\nimport { withApollo } from '../../../utils/withApollo'\n\nconst EditPost = ({}) => {\n  const router = useRouter()\n  const intId = useGetIntId()\n  // return -1 if there is route is not valid string\n  const { data, loading } = usePostQuery({\n    skip: intId === -1,\n    variables: {\n      id: intId,\n    },\n  })\n  const [updatePost] = useUpdatePostMutation()\n  if (loading) {\n    return (\n      <Layout>\n        <div>loading...</div>\n      </Layout>\n    )\n  }\n\n  if (!data?.post) {\n    return (\n      <Layout>\n        <Box>could not find post</Box>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout variant=\"small\">\n      <Formik\n        initialValues={{ title: data.post.title, text: data.post.text }}\n        onSubmit={async (values) => {\n          await updatePost({ variables: { id: intId, ...values } })\n          router.back() // back to previous in stack\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField name=\"title\" placeholder=\"title\" label=\"Title\" />\n            <Box mt={4}>\n              <InputField\n                textarea\n                name=\"text\"\n                placeholder=\"text...\"\n                label=\"Body\"\n              />\n            </Box>\n            <Button\n              mt={4}\n              type=\"submit\"\n              colorScheme=\"teal\"\n              isLoading={isSubmitting}\n            >\n              update post\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Layout>\n  )\n}\n\nexport default withApollo({ ssr: false })(EditPost)\n"]},"metadata":{},"sourceType":"module"}