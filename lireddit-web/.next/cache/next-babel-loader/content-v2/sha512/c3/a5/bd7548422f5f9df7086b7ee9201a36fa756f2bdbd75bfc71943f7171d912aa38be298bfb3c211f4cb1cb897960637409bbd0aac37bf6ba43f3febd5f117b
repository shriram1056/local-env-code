{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$();\n\nfunction _templateObject16() {\n  var data = _taggedTemplateLiteral([\"\\n    query Posts($limit: Int!, $cursor: String) {\\n  posts(cursor: $cursor, limit: $limit) {\\n    hasMore\\n    posts {\\n      ...PostSnippet\\n    }\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject16 = function _templateObject16() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject15() {\n  var data = _taggedTemplateLiteral([\"\\n    query Post($id: Int!) {\\n  post(id: $id) {\\n    id\\n    updatedAt\\n    createdAt\\n    title\\n    points\\n    text\\n    voteStatus\\n    creator {\\n      id\\n      username\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject15 = function _templateObject15() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me {\\n    id\\n    username\\n  }\\n}\\n    \"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Vote($value: Int!, $postid: Int!) {\\n  vote(value: $value, postid: $postid)\\n}\\n    \"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UpdatePost($id: Int!, $title: String!, $text: String!) {\\n  updatePost(id: $id, title: $title, text: $text) {\\n    id\\n    title\\n    text\\n    textSnippet\\n  }\\n}\\n    \"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Register($options: UsernamePasswordInput!) {\\n  register(options: $options) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Logout {\\n  logout\\n}\\n    \"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($usernameOrEmail: String!, $password: String!) {\\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation ForgotPassword($email: String!) {\\n  forgotPassword(email: $email)\\n}\\n    \"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeletePost($id: Int!) {\\n  deletePost(id: $id)\\n}\\n    \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreatePost($input: PostInput!) {\\n  createPost(input: $input) {\\n    id\\n    createdAt\\n    updatedAt\\n    title\\n    creatorId\\n    text\\n  }\\n}\\n    \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation ChangePassword($token: String!, $newPassword: String!) {\\n  changePassword(token: $token, newPassword: $newPassword) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularUserResponse on UserResponse {\\n  errors {\\n    ...RegularError\\n  }\\n  user {\\n    ...RegularUser\\n  }\\n}\\n    \", \"\\n\", \"\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularUser on User {\\n  id\\n  username\\n}\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularError on FieldError {\\n  field\\n  message\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment PostSnippet on Post {\\n  id\\n  updatedAt\\n  createdAt\\n  title\\n  points\\n  textSnippet\\n  voteStatus\\n  creator {\\n    id\\n    email\\n    username\\n    createdAt\\n    updatedAt\\n  }\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport var PostSnippetFragmentDoc = gql(_templateObject());\nexport var RegularErrorFragmentDoc = gql(_templateObject2());\nexport var RegularUserFragmentDoc = gql(_templateObject3());\nexport var RegularUserResponseFragmentDoc = gql(_templateObject4(), RegularErrorFragmentDoc, RegularUserFragmentDoc);\nexport var ChangePasswordDocument = gql(_templateObject5(), RegularUserResponseFragmentDoc);\n\n/**\n * __useChangePasswordMutation__\n *\n * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({\n *   variables: {\n *      token: // value for 'token'\n *      newPassword: // value for 'newPassword'\n *   },\n * });\n */\nexport function useChangePasswordMutation(baseOptions) {\n  _s();\n\n  return Apollo.useMutation(ChangePasswordDocument, baseOptions);\n}\n\n_s(useChangePasswordMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreatePostDocument = gql(_templateObject6());\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions) {\n  _s2();\n\n  return Apollo.useMutation(CreatePostDocument, baseOptions);\n}\n\n_s2(useCreatePostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var DeletePostDocument = gql(_templateObject7());\n\n/**\n * __useDeletePostMutation__\n *\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeletePostMutation(baseOptions) {\n  _s3();\n\n  return Apollo.useMutation(DeletePostDocument, baseOptions);\n}\n\n_s3(useDeletePostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var ForgotPasswordDocument = gql(_templateObject8());\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions) {\n  _s4();\n\n  return Apollo.useMutation(ForgotPasswordDocument, baseOptions);\n}\n\n_s4(useForgotPasswordMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LoginDocument = gql(_templateObject9(), RegularUserResponseFragmentDoc);\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      usernameOrEmail: // value for 'usernameOrEmail'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  _s5();\n\n  return Apollo.useMutation(LoginDocument, baseOptions);\n}\n\n_s5(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LogoutDocument = gql(_templateObject10());\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  _s6();\n\n  return Apollo.useMutation(LogoutDocument, baseOptions);\n}\n\n_s6(useLogoutMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var RegisterDocument = gql(_templateObject11(), RegularUserResponseFragmentDoc);\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  _s7();\n\n  return Apollo.useMutation(RegisterDocument, baseOptions);\n}\n\n_s7(useRegisterMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var UpdatePostDocument = gql(_templateObject12());\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      title: // value for 'title'\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions) {\n  _s8();\n\n  return Apollo.useMutation(UpdatePostDocument, baseOptions);\n}\n\n_s8(useUpdatePostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var VoteDocument = gql(_templateObject13());\n\n/**\n * __useVoteMutation__\n *\n * To run a mutation, you first call `useVoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useVoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [voteMutation, { data, loading, error }] = useVoteMutation({\n *   variables: {\n *      value: // value for 'value'\n *      postid: // value for 'postid'\n *   },\n * });\n */\nexport function useVoteMutation(baseOptions) {\n  _s9();\n\n  return Apollo.useMutation(VoteDocument, baseOptions);\n}\n\n_s9(useVoteMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var MeDocument = gql(_templateObject14());\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  _s10();\n\n  return Apollo.useQuery(MeDocument, baseOptions);\n}\n\n_s10(useMeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMeLazyQuery(baseOptions) {\n  _s11();\n\n  return Apollo.useLazyQuery(MeDocument, baseOptions);\n}\n\n_s11(useMeLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var PostDocument = gql(_templateObject15());\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function usePostQuery(baseOptions) {\n  _s12();\n\n  return Apollo.useQuery(PostDocument, baseOptions);\n}\n\n_s12(usePostQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function usePostLazyQuery(baseOptions) {\n  _s13();\n\n  return Apollo.useLazyQuery(PostDocument, baseOptions);\n}\n\n_s13(usePostLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var PostsDocument = gql(_templateObject16(), PostSnippetFragmentDoc);\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function usePostsQuery(baseOptions) {\n  _s14();\n\n  return Apollo.useQuery(PostsDocument, baseOptions);\n}\n\n_s14(usePostsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function usePostsLazyQuery(baseOptions) {\n  _s15();\n\n  return Apollo.useLazyQuery(PostsDocument, baseOptions);\n}\n\n_s15(usePostsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/generated/graphql.tsx"],"names":["gql","Apollo","PostSnippetFragmentDoc","RegularErrorFragmentDoc","RegularUserFragmentDoc","RegularUserResponseFragmentDoc","ChangePasswordDocument","useChangePasswordMutation","baseOptions","useMutation","CreatePostDocument","useCreatePostMutation","DeletePostDocument","useDeletePostMutation","ForgotPasswordDocument","useForgotPasswordMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","UpdatePostDocument","useUpdatePostMutation","VoteDocument","useVoteMutation","MeDocument","useMeQuery","useQuery","useMeLazyQuery","useLazyQuery","PostDocument","usePostQuery","usePostLazyQuery","PostsDocument","usePostsQuery","usePostsLazyQuery"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  posts: PaginatedPosts;\n  post?: Maybe<Post>;\n  me?: Maybe<User>;\n};\n\n\nexport type QueryPostsArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  limit: Scalars['Int'];\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['Int'];\n};\n\nexport type PaginatedPosts = {\n  __typename?: 'PaginatedPosts';\n  posts: Array<Post>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['Float'];\n  title: Scalars['String'];\n  text: Scalars['String'];\n  points: Scalars['Float'];\n  voteStatus?: Maybe<Scalars['Int']>;\n  creatorId: Scalars['Float'];\n  creator: User;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  textSnippet: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  vote: Scalars['Boolean'];\n  createPost: Post;\n  updatePost?: Maybe<Post>;\n  deletePost: Scalars['Boolean'];\n  changePassword: UserResponse;\n  forgotPassword: Scalars['Boolean'];\n  register: UserResponse;\n  login: UserResponse;\n  logout: Scalars['Boolean'];\n};\n\n\nexport type MutationVoteArgs = {\n  value: Scalars['Int'];\n  postid: Scalars['Int'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  input: PostInput;\n};\n\n\nexport type MutationUpdatePostArgs = {\n  text: Scalars['String'];\n  title: Scalars['String'];\n  id: Scalars['Int'];\n};\n\n\nexport type MutationDeletePostArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationChangePasswordArgs = {\n  newPassword: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  usernameOrEmail: Scalars['String'];\n};\n\nexport type PostInput = {\n  title: Scalars['String'];\n  text: Scalars['String'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type UsernamePasswordInput = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type PostSnippetFragment = (\n  { __typename?: 'Post' }\n  & Pick<Post, 'id' | 'updatedAt' | 'createdAt' | 'title' | 'points' | 'textSnippet' | 'voteStatus'>\n  & { creator: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'username' | 'createdAt' | 'updatedAt'>\n  ) }\n);\n\nexport type RegularErrorFragment = (\n  { __typename?: 'FieldError' }\n  & Pick<FieldError, 'field' | 'message'>\n);\n\nexport type RegularUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'username'>\n);\n\nexport type RegularUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, user?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type ChangePasswordMutationVariables = Exact<{\n  token: Scalars['String'];\n  newPassword: Scalars['String'];\n}>;\n\n\nexport type ChangePasswordMutation = (\n  { __typename?: 'Mutation' }\n  & { changePassword: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type CreatePostMutationVariables = Exact<{\n  input: PostInput;\n}>;\n\n\nexport type CreatePostMutation = (\n  { __typename?: 'Mutation' }\n  & { createPost: (\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'createdAt' | 'updatedAt' | 'title' | 'creatorId' | 'text'>\n  ) }\n);\n\nexport type DeletePostMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DeletePostMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deletePost'>\n);\n\nexport type ForgotPasswordMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type ForgotPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'forgotPassword'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  usernameOrEmail: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type UpdatePostMutationVariables = Exact<{\n  id: Scalars['Int'];\n  title: Scalars['String'];\n  text: Scalars['String'];\n}>;\n\n\nexport type UpdatePostMutation = (\n  { __typename?: 'Mutation' }\n  & { updatePost?: Maybe<(\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'title' | 'text' | 'textSnippet'>\n  )> }\n);\n\nexport type VoteMutationVariables = Exact<{\n  value: Scalars['Int'];\n  postid: Scalars['Int'];\n}>;\n\n\nexport type VoteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'vote'>\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username'>\n  )> }\n);\n\nexport type PostQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type PostQuery = (\n  { __typename?: 'Query' }\n  & { post?: Maybe<(\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'updatedAt' | 'createdAt' | 'title' | 'points' | 'text' | 'voteStatus'>\n    & { creator: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username'>\n    ) }\n  )> }\n);\n\nexport type PostsQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type PostsQuery = (\n  { __typename?: 'Query' }\n  & { posts: (\n    { __typename?: 'PaginatedPosts' }\n    & Pick<PaginatedPosts, 'hasMore'>\n    & { posts: Array<(\n      { __typename?: 'Post' }\n      & PostSnippetFragment\n    )> }\n  ) }\n);\n\nexport const PostSnippetFragmentDoc = gql`\n    fragment PostSnippet on Post {\n  id\n  updatedAt\n  createdAt\n  title\n  points\n  textSnippet\n  voteStatus\n  creator {\n    id\n    email\n    username\n    createdAt\n    updatedAt\n  }\n}\n    `;\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const ChangePasswordDocument = gql`\n    mutation ChangePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type ChangePasswordMutationFn = Apollo.MutationFunction<ChangePasswordMutation, ChangePasswordMutationVariables>;\n\n/**\n * __useChangePasswordMutation__\n *\n * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({\n *   variables: {\n *      token: // value for 'token'\n *      newPassword: // value for 'newPassword'\n *   },\n * });\n */\nexport function useChangePasswordMutation(baseOptions?: Apollo.MutationHookOptions<ChangePasswordMutation, ChangePasswordMutationVariables>) {\n        return Apollo.useMutation<ChangePasswordMutation, ChangePasswordMutationVariables>(ChangePasswordDocument, baseOptions);\n      }\nexport type ChangePasswordMutationHookResult = ReturnType<typeof useChangePasswordMutation>;\nexport type ChangePasswordMutationResult = Apollo.MutationResult<ChangePasswordMutation>;\nexport type ChangePasswordMutationOptions = Apollo.BaseMutationOptions<ChangePasswordMutation, ChangePasswordMutationVariables>;\nexport const CreatePostDocument = gql`\n    mutation CreatePost($input: PostInput!) {\n  createPost(input: $input) {\n    id\n    createdAt\n    updatedAt\n    title\n    creatorId\n    text\n  }\n}\n    `;\nexport type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, baseOptions);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const DeletePostDocument = gql`\n    mutation DeletePost($id: Int!) {\n  deletePost(id: $id)\n}\n    `;\nexport type DeletePostMutationFn = Apollo.MutationFunction<DeletePostMutation, DeletePostMutationVariables>;\n\n/**\n * __useDeletePostMutation__\n *\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeletePostMutation(baseOptions?: Apollo.MutationHookOptions<DeletePostMutation, DeletePostMutationVariables>) {\n        return Apollo.useMutation<DeletePostMutation, DeletePostMutationVariables>(DeletePostDocument, baseOptions);\n      }\nexport type DeletePostMutationHookResult = ReturnType<typeof useDeletePostMutation>;\nexport type DeletePostMutationResult = Apollo.MutationResult<DeletePostMutation>;\nexport type DeletePostMutationOptions = Apollo.BaseMutationOptions<DeletePostMutation, DeletePostMutationVariables>;\nexport const ForgotPasswordDocument = gql`\n    mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\nexport type ForgotPasswordMutationFn = Apollo.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {\n        return Apollo.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, baseOptions);\n      }\nexport type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;\nexport type ForgotPasswordMutationResult = Apollo.MutationResult<ForgotPasswordMutation>;\nexport type ForgotPasswordMutationOptions = Apollo.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($usernameOrEmail: String!, $password: String!) {\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      usernameOrEmail: // value for 'usernameOrEmail'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const UpdatePostDocument = gql`\n    mutation UpdatePost($id: Int!, $title: String!, $text: String!) {\n  updatePost(id: $id, title: $title, text: $text) {\n    id\n    title\n    text\n    textSnippet\n  }\n}\n    `;\nexport type UpdatePostMutationFn = Apollo.MutationFunction<UpdatePostMutation, UpdatePostMutationVariables>;\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      title: // value for 'title'\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePostMutation, UpdatePostMutationVariables>) {\n        return Apollo.useMutation<UpdatePostMutation, UpdatePostMutationVariables>(UpdatePostDocument, baseOptions);\n      }\nexport type UpdatePostMutationHookResult = ReturnType<typeof useUpdatePostMutation>;\nexport type UpdatePostMutationResult = Apollo.MutationResult<UpdatePostMutation>;\nexport type UpdatePostMutationOptions = Apollo.BaseMutationOptions<UpdatePostMutation, UpdatePostMutationVariables>;\nexport const VoteDocument = gql`\n    mutation Vote($value: Int!, $postid: Int!) {\n  vote(value: $value, postid: $postid)\n}\n    `;\nexport type VoteMutationFn = Apollo.MutationFunction<VoteMutation, VoteMutationVariables>;\n\n/**\n * __useVoteMutation__\n *\n * To run a mutation, you first call `useVoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useVoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [voteMutation, { data, loading, error }] = useVoteMutation({\n *   variables: {\n *      value: // value for 'value'\n *      postid: // value for 'postid'\n *   },\n * });\n */\nexport function useVoteMutation(baseOptions?: Apollo.MutationHookOptions<VoteMutation, VoteMutationVariables>) {\n        return Apollo.useMutation<VoteMutation, VoteMutationVariables>(VoteDocument, baseOptions);\n      }\nexport type VoteMutationHookResult = ReturnType<typeof useVoteMutation>;\nexport type VoteMutationResult = Apollo.MutationResult<VoteMutation>;\nexport type VoteMutationOptions = Apollo.BaseMutationOptions<VoteMutation, VoteMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    username\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const PostDocument = gql`\n    query Post($id: Int!) {\n  post(id: $id) {\n    id\n    updatedAt\n    createdAt\n    title\n    points\n    text\n    voteStatus\n    creator {\n      id\n      username\n    }\n  }\n}\n    `;\n\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function usePostQuery(baseOptions: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {\n        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n      }\nexport function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {\n          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n        }\nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;\nexport type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostsDocument = gql`\n    query Posts($limit: Int!, $cursor: String) {\n  posts(cursor: $cursor, limit: $limit) {\n    hasMore\n    posts {\n      ...PostSnippet\n    }\n  }\n}\n    ${PostSnippetFragmentDoc}`;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n      }\nexport function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;"]},"metadata":{},"sourceType":"module"}