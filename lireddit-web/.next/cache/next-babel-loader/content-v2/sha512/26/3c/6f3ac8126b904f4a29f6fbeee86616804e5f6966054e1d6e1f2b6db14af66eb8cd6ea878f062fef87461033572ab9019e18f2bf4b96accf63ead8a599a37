{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/lireddit/lireddit-web/src/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ChakraProvider, ColorModeProvider } from '@chakra-ui/react';\nimport React from 'react';\nimport { createClient, Provider } from 'urql';\nimport theme from '../theme'; //the result of queries will be cached and they won't be able to react to mutations result. here me query depend on login mutation.\n\nfunction betterUpdateQuery(cache, qi, result, fn) // r: mutation object      q: query object\n{\n  return cache.updateQuery(qi, data => fn(result, data)); //updateQuery() can be used to update the data of a given query using an updater function.\n  //data:  The updater function receives the query data as its' only argument and must return the updated version of said data.\n}\n\nconst client = createClient({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n\n  }\n}); //point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain.\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: client,\n    children: /*#__PURE__*/_jsxDEV(ChakraProvider, {\n      resetCSS: true,\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(ColorModeProvider, {\n        options: {\n          useSystemColorMode: true\n        },\n        children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\nexport default MyApp; // exchanges: [\n//     dedupExchange,\n//     cacheExchange({\n//       updates: {\n//         Mutation: {\n//           login: (_result, args, cache, info) => {\n//             // result is the complete data of login mutation. this is used in replacement of Query me's data\n//             betterUpdateQuery<LoginMutation, MeQuery>(\n//               cache,\n//               { query: MeDocument }, // the query to be updated\n//               _result,\n//               (result, query) => {\n//                 // we are just defining the function here\n//                 //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n//                 if (result.login.errors) {\n//                   return query\n//                 } else {\n//                   return {\n//                     me: result.login.user,\n//                   }\n//                 }\n//               }\n//             )\n//           },\n//           register: (_result, args, cache, info) => {\n//             betterUpdateQuery<RegisterMutation, MeQuery>(\n//               cache,\n//               { query: MeDocument }, // the query to be updated\n//               _result,\n//               (result, query) => {\n//                 if (result.register.errors) {\n//                   return query // if not register then return the current me query\n//                 } else {\n//                   return {\n//                     me: result.register.user, // user and errors are in mutation check it.\n//                     // the user field in mutation is the same as me query\n//                   }\n//                 }\n//               }\n//             )\n//           },\n//         },\n//       },\n//     }),fetchExchange\n//   ],","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/pages/_app.tsx"],"names":["ChakraProvider","ColorModeProvider","React","createClient","Provider","theme","betterUpdateQuery","cache","qi","result","fn","updateQuery","data","client","url","fetchOptions","credentials","MyApp","Component","pageProps","useSystemColorMode"],"mappings":";;;;;;;;;AAAA,SAASA,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,MAAvC;AACA,OAAOC,KAAP,MAAkB,UAAlB,C,CAEA;;AAEA,SAASC,iBAAT,CACEC,KADF,EAEEC,EAFF,EAGEC,MAHF,EAIEC,EAJF,EAIqC;AACnC;AACA,SAAOH,KAAK,CAACI,WAAN,CAAkBH,EAAlB,EAAuBI,IAAD,IAAUF,EAAE,CAACD,MAAD,EAASG,IAAT,CAAlC,CAAP,CADA,CACuE;AACvE;AACD;;AACD,MAAMC,MAAM,GAAGV,YAAY,CAAC;AAC1BW,EAAAA,GAAG,EAAE,+BADqB;AAE1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE,SADD,CACY;AAExB;;AAHY;AAFY,CAAD,CAA3B,C,CAOG;AACH;AAEA;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAA8C;AAC5C,sBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEN,MAAjB;AAAA,2BACE,QAAC,cAAD;AAAgB,MAAA,QAAQ,MAAxB;AAAyB,MAAA,KAAK,EAAER,KAAhC;AAAA,6BACE,QAAC,iBAAD;AACE,QAAA,OAAO,EAAE;AACPe,UAAAA,kBAAkB,EAAE;AADb,SADX;AAAA,+BAKE,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;AAED,eAAeF,KAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ChakraProvider, ColorModeProvider } from '@chakra-ui/react'\nimport { Cache, QueryInput } from '@urql/exchange-graphcache'\nimport React from 'react'\nimport { createClient, Provider } from 'urql'\nimport theme from '../theme'\n\n//the result of queries will be cached and they won't be able to react to mutations result. here me query depend on login mutation.\n\nfunction betterUpdateQuery<Result, Query>(\n  cache: Cache,\n  qi: QueryInput,\n  result: any,\n  fn: (r: Result, q: Query) => Query // r: mutation object      q: query object\n) {\n  return cache.updateQuery(qi, (data) => fn(result, data as any) as any) //updateQuery() can be used to update the data of a given query using an updater function.\n  //data:  The updater function receives the query data as its' only argument and must return the updated version of said data.\n}\nconst client = createClient({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include', // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n  },\n}) //point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain.\n\nfunction MyApp({ Component, pageProps }: any) {\n  return (\n    <Provider value={client}>\n      <ChakraProvider resetCSS theme={theme}>\n        <ColorModeProvider\n          options={{\n            useSystemColorMode: true,\n          }}\n        >\n          <Component {...pageProps} />\n        </ColorModeProvider>\n      </ChakraProvider>\n    </Provider>\n  )\n}\n\nexport default MyApp\n\n// exchanges: [\n//     dedupExchange,\n//     cacheExchange({\n//       updates: {\n//         Mutation: {\n//           login: (_result, args, cache, info) => {\n//             // result is the complete data of login mutation. this is used in replacement of Query me's data\n//             betterUpdateQuery<LoginMutation, MeQuery>(\n//               cache,\n//               { query: MeDocument }, // the query to be updated\n//               _result,\n//               (result, query) => {\n//                 // we are just defining the function here\n//                 //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n//                 if (result.login.errors) {\n//                   return query\n//                 } else {\n//                   return {\n//                     me: result.login.user,\n//                   }\n//                 }\n//               }\n//             )\n//           },\n//           register: (_result, args, cache, info) => {\n//             betterUpdateQuery<RegisterMutation, MeQuery>(\n//               cache,\n//               { query: MeDocument }, // the query to be updated\n//               _result,\n//               (result, query) => {\n//                 if (result.register.errors) {\n//                   return query // if not register then return the current me query\n//                 } else {\n//                   return {\n//                     me: result.register.user, // user and errors are in mutation check it.\n//                     // the user field in mutation is the same as me query\n//                   }\n//                 }\n//               }\n//             )\n//           },\n//         },\n//       },\n//     }),fetchExchange\n//   ],\n"]},"metadata":{},"sourceType":"module"}