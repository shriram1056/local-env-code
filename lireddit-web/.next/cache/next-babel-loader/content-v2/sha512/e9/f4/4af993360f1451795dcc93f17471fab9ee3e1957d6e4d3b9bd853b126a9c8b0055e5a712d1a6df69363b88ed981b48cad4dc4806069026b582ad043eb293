{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/lireddit/lireddit-web/src/pages/post/[id].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Box, Heading } from '@chakra-ui/react';\nimport { withUrqlClient } from 'next-urql';\nimport React from 'react';\nimport { Layout } from '../../components/Layout';\nimport { createUrqlClient } from '../../utils/createUrqlClient';\nimport { useGetPostFromUrl } from '../../utils/useGetPostFromUrl';\n\nvar Post = function Post(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useGetPostFromUrl = useGetPostFromUrl(),\n      _useGetPostFromUrl2 = _slicedToArray(_useGetPostFromUrl, 1),\n      _useGetPostFromUrl2$ = _useGetPostFromUrl2[0],\n      data = _useGetPostFromUrl2$.data,\n      error = _useGetPostFromUrl2$.error,\n      fetching = _useGetPostFromUrl2$.fetching;\n\n  if (fetching) {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, _this);\n  }\n\n  if (!(data !== null && data !== void 0 && data.post)) {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: \"could not find post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      children: data.post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, _this), data.post.text]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, _this);\n}; // let x = foo?.bar.baz();\n// this code will check if foo is defined otherwise it will return undefined\n// old way :\n// if(foo != null && foo != undefined) {\n//    x = foo.bar.baz();\n// }\n\n\n_s(Post, \"J9Le4os/GLWloNU04wn7HJy1pgY=\", false, function () {\n  return [useGetPostFromUrl];\n});\n\n_c = Post;\nexport default withUrqlClient(createUrqlClient, {\n  ssr: true\n})(Post);\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/pages/post/[id].tsx"],"names":["Box","Heading","withUrqlClient","React","Layout","createUrqlClient","useGetPostFromUrl","Post","data","error","fetching","post","title","text","ssr"],"mappings":";;;;;;;;AAAA,SAASA,GAAT,EAAcC,OAAd,QAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,iBAAT,QAAkC,+BAAlC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAQ;AAAA;;AAAA;;AAAA,2BACiBD,iBAAiB,EADlC;AAAA;AAAA;AAAA,MACVE,IADU,wBACVA,IADU;AAAA,MACJC,KADI,wBACJA,KADI;AAAA,MACGC,QADH,wBACGA,QADH;;AAEnB,MAAIA,QAAJ,EAAc;AACZ,wBACE,QAAC,MAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADF;AAKD;;AACD,MAAI,EAACF,IAAD,aAACA,IAAD,eAACA,IAAI,CAAEG,IAAP,CAAJ,EAAiB;AACf,wBACE,QAAC,MAAD;AAAA,6BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADF;AAKD;;AACD,sBACE,QAAC,MAAD;AAAA,4BACE,QAAC,OAAD;AAAA,gBAAUH,IAAI,CAACG,IAAL,CAAUC;AAApB;AAAA;AAAA;AAAA;AAAA,aADF,EAEGJ,IAAI,CAACG,IAAL,CAAUE,IAFb;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CAvBD,C,CAwBA;AACA;AAEA;AAEA;AACA;AACA;;;GA/BMN,I;UACgCD,iB;;;KADhCC,I;AAiCN,eAAeL,cAAc,CAACG,gBAAD,EAAmB;AAAES,EAAAA,GAAG,EAAE;AAAP,CAAnB,CAAd,CAAgDP,IAAhD,CAAf","sourcesContent":["import { Box, Heading } from '@chakra-ui/react'\nimport { withUrqlClient } from 'next-urql'\nimport React from 'react'\nimport { Layout } from '../../components/Layout'\nimport { createUrqlClient } from '../../utils/createUrqlClient'\nimport { useGetPostFromUrl } from '../../utils/useGetPostFromUrl'\n\nconst Post = ({}) => {\n  const [{ data, error, fetching }] = useGetPostFromUrl()\n  if (fetching) {\n    return (\n      <Layout>\n        <div>loading...</div>\n      </Layout>\n    )\n  }\n  if (!data?.post) {\n    return (\n      <Layout>\n        <Box>could not find post</Box>\n      </Layout>\n    )\n  }\n  return (\n    <Layout>\n      <Heading>{data.post.title}</Heading>\n      {data.post.text}\n      {/* ?. : this used to check if objects is null or undefined */}\n    </Layout>\n  )\n}\n// let x = foo?.bar.baz();\n// this code will check if foo is defined otherwise it will return undefined\n\n// old way :\n\n// if(foo != null && foo != undefined) {\n//    x = foo.bar.baz();\n// }\n\nexport default withUrqlClient(createUrqlClient, { ssr: true })(Post)\n"]},"metadata":{},"sourceType":"module"}