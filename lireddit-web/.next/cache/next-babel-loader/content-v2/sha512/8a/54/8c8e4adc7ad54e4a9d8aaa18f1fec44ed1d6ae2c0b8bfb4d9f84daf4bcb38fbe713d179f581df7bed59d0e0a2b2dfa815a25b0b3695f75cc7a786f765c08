{"ast":null,"code":"import _defineProperty from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nexport var client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          posts: {\n            merge: function merge(existing, incoming) {\n              return _objectSpread(_objectSpread({}, incoming), {}, {\n                posts: []\n              });\n            }\n          }\n        }\n      }\n    }\n  }),\n  credentials: 'include'\n});","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/utils/createApolloClient.ts"],"names":["ApolloClient","InMemoryCache","client","uri","cache","typePolicies","Query","fields","posts","merge","existing","incoming","credentials"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AAGA,OAAO,IAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AACrCG,EAAAA,GAAG,EAAE,+BADgC;AAErCC,EAAAA,KAAK,EAAE,IAAIH,aAAJ,CAAkB;AACvBI,IAAAA,YAAY,EAAE;AACZC,MAAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE;AACLC,YAAAA,KADK,iBAEHC,QAFG,EAGHC,QAHG,EAIa;AAChB,qDACKA,QADL;AAEEH,gBAAAA,KAAK,EAAE;AAFT;AAID;AATI;AADD;AADH;AADK;AADS,GAAlB,CAF8B;AAqBrCI,EAAAA,WAAW,EAAE;AArBwB,CAAjB,CAAf","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client'\nimport { PaginatedPosts } from '../generated/graphql'\n\nexport const client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          posts: {\n            merge(\n              existing: PaginatedPosts | undefined,\n              incoming: PaginatedPosts\n            ): PaginatedPosts {\n              return {\n                ...incoming,\n                posts: [],\n              }\n            },\n          },\n        },\n      },\n    },\n  }),\n  credentials: 'include',\n})\n"]},"metadata":{},"sourceType":"module"}