{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/lireddit/lireddit-web/src/pages/register.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Box, Button, Flex, Link } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport NextLink from 'next/link';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { InputField } from '../components/inputField';\nimport { Wrapper } from '../components/Wrapper';\nimport { MeDocument, useRegisterMutation } from '../generated/graphql';\nimport { toErrorMap } from '../utils/toErrorMap';\nimport { withApollo } from '../utils/withApollo';\n\nvar Register = function Register(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 1),\n      register = _useRegisterMutation2[0];\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        email: '',\n        username: '',\n        password: ''\n      },\n      onSubmit: /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n          var _response$data, _response$data2;\n\n          var setErrors, response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setErrors = _ref2.setErrors;\n                  _context.next = 3;\n                  return register({\n                    variables: {\n                      options: values\n                    },\n                    update: function update(cache, _ref4) {\n                      var data = _ref4.data;\n                      cache.writeQuery({\n                        query: MeDocument,\n                        data: {\n                          __typename: 'Query',\n                          me: data === null || data === void 0 ? void 0 : data.register.user\n                        }\n                      });\n                      cache.evict({\n                        fieldName: 'posts:{}'\n                      });\n                    }\n                  });\n\n                case 3:\n                  response = _context.sent;\n\n                  // this return a promise needed to stop the spinner or isSubmitting\n                  if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.register.errors) {\n                    console.log(toErrorMap(response.data.register.errors));\n                    setErrors(toErrorMap(response.data.register.errors)); // set errors shows error below input field. to show error below particular field we say {username: \"too small\"}\n                  } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.register.user) {\n                    // worked\n                    router.push('/');\n                  }\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      children: function children(_ref5) {\n        var isSubmitting = _ref5.isSubmitting;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(InputField, {\n            name: \"username\",\n            placeholder: \"username\",\n            label: \"username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            children: /*#__PURE__*/_jsxDEV(InputField, {\n              name: \"email\",\n              placeholder: \"email\",\n              label: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            children: /*#__PURE__*/_jsxDEV(InputField, {\n              name: \"password\",\n              placeholder: \"password\",\n              label: \"password\",\n              type: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Flex, {\n            mt: 2,\n            children: /*#__PURE__*/_jsxDEV(NextLink, {\n              href: \"/forgot-password\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                ml: \"auto\",\n                children: \"forgot password?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 17\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            mt: 4,\n            type: \"submit\",\n            colorScheme: \"teal\",\n            isLoading: isSubmitting,\n            children: \"register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Register, \"+jIDrcLSNrHT9k8ae+O8lecjNWk=\", false, function () {\n  return [useRouter, useRegisterMutation];\n});\n\n_c = Register;\nexport default withApollo({\n  ssr: false\n})(Register);\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/pages/register.tsx"],"names":["Box","Button","Flex","Link","Form","Formik","NextLink","useRouter","React","InputField","Wrapper","MeDocument","useRegisterMutation","toErrorMap","withApollo","Register","router","register","email","username","password","values","setErrors","variables","options","update","cache","data","writeQuery","query","__typename","me","user","evict","fieldName","response","errors","console","log","push","isSubmitting","ssr"],"mappings":"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","sourcesContent":["import { Box, Button, Flex, Link } from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport NextLink from 'next/link'\nimport { useRouter } from 'next/router'\nimport React from 'react'\nimport { InputField } from '../components/inputField'\nimport { Wrapper } from '../components/Wrapper'\nimport { MeDocument, MeQuery, useRegisterMutation } from '../generated/graphql'\nimport { toErrorMap } from '../utils/toErrorMap'\nimport { withApollo } from '../utils/withApollo'\n\ninterface registerProps {}\n\nconst Register: React.FC<registerProps> = ({}) => {\n  const router = useRouter()\n  const [register] = useRegisterMutation()\n\n  return (\n    <Wrapper variant=\"small\">\n      <Formik\n        initialValues={{ email: '', username: '', password: '' }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await register({\n            variables: { options: values },\n            update: (cache, { data }) => {\n              cache.writeQuery<MeQuery>({\n                query: MeDocument,\n                data: {\n                  __typename: 'Query',\n                  me: data?.register.user,\n                },\n              })\n              cache.evict({ fieldName: 'posts:{}' })\n            },\n          }) // this return a promise needed to stop the spinner or isSubmitting\n\n          if (response.data?.register.errors) {\n            console.log(toErrorMap(response.data.register.errors))\n            setErrors(toErrorMap(response.data.register.errors))\n            // set errors shows error below input field. to show error below particular field we say {username: \"too small\"}\n          } else if (response.data?.register.user) {\n            // worked\n            router.push('/')\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField\n              name=\"username\"\n              placeholder=\"username\"\n              label=\"username\"\n            />\n            <Box mt={4}>\n              <InputField name=\"email\" placeholder=\"email\" label=\"email\" />\n            </Box>\n            <Box mt={4}>\n              <InputField\n                name=\"password\"\n                placeholder=\"password\"\n                label=\"password\"\n                type=\"password\"\n              />\n            </Box>\n            <Flex mt={2}>\n              <NextLink href=\"/forgot-password\">\n                <Link ml=\"auto\">forgot password?</Link>\n              </NextLink>\n            </Flex>\n            <Button\n              mt={4}\n              type=\"submit\"\n              colorScheme=\"teal\"\n              isLoading={isSubmitting}\n            >\n              register\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  )\n}\n\nexport default withApollo({ ssr: false })(Register)\n"]},"metadata":{},"sourceType":"module"}