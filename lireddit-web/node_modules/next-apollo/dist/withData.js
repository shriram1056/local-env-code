"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.initOnContext = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _app = _interopRequireDefault(require("next/app"));

var _head = _interopRequireDefault(require("next/head"));

var _reactHooks = require("@apollo/react-hooks");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// On the client, we store the Apollo Client in the following variable.
// This prevents the client from reinitializing between page transitions.
var globalApolloClient = null;
/**
 * Installs the Apollo Client on NextPageContext
 * or NextAppContext. Useful if you want to use apolloClient
 * inside getStaticProps, getStaticPaths or getServerSideProps
 * @param {NextPageContext | NextAppContext} ctx
 */

var initOnContext = function initOnContext(ac, ctx) {
  var inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level
  // as antipattern since it disables project wide Automatic Static Optimization.

  if (process.env.NODE_ENV === "development") {
    if (inAppContext) {
      console.warn("Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\n" + "Read more: https://err.sh/next.js/opt-out-auto-static-optimization\n");
    }
  } // Initialize ApolloClient if not already done


  var apolloClient = ctx.apolloClient || initApolloClient(ac, ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx); // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.
  // Otherwise, the component would have to call initApollo() again but this
  // time without the context. Once that happens, the following code will make sure we send
  // the prop as `null` to the browser.

  apolloClient.toJSON = function () {
    return null;
  }; // Add apolloClient to NextPageContext & NextAppContext.
  // This allows us to consume the apolloClient inside our
  // custom `getInitialProps({ apolloClient })`.


  ctx.apolloClient = apolloClient;

  if (inAppContext) {
    ctx.ctx.apolloClient = apolloClient;
  }

  return ctx;
};
/**
 * Always creates a new apollo client on the server
 * Creates or reuses apollo client in the browser.
 * @param  {NormalizedCacheObject} initialState
 * @param  {NextPageContext} ctx
 */


exports.initOnContext = initOnContext;

var initApolloClient = function initApolloClient(apolloClient, initialState, ctx) {
  // Make sure to create a new client for every server-side request so that data
  // isn't shared between connections (which would be bad)
  if (typeof window === "undefined") {
    return createApolloClient(apolloClient, initialState, ctx);
  } // Reuse client on the client-side


  if (!globalApolloClient) {
    globalApolloClient = createApolloClient(apolloClient, initialState, ctx);
  }

  return globalApolloClient;
};
/**
 * Creates a withApollo HOC
 * that provides the apolloContext
 * to a next.js Page or AppTree.
 * @param  {Object} withApolloOptions
 * @param  {Boolean} [withApolloOptions.ssr=false]
 * @returns {(PageComponent: ReactNode) => ReactNode}
 */


var _default = function _default(ac) {
  return function () {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$ssr = _ref.ssr,
        ssr = _ref$ssr === void 0 ? false : _ref$ssr;

    return function (PageComponent) {
      var WithApollo = function WithApollo(_ref2) {
        var apolloClient = _ref2.apolloClient,
            apolloState = _ref2.apolloState,
            pageProps = (0, _objectWithoutProperties2["default"])(_ref2, ["apolloClient", "apolloState"]);
        var client;

        if (apolloClient) {
          // Happens on: getDataFromTree & next.js ssr
          client = apolloClient;
        } else {
          // Happens on: next.js csr
          client = initApolloClient(ac, apolloState, undefined);
        }

        return /*#__PURE__*/_react["default"].createElement(_reactHooks.ApolloProvider, {
          client: client
        }, /*#__PURE__*/_react["default"].createElement(PageComponent, pageProps));
      }; // Set the correct displayName in development


      if (process.env.NODE_ENV !== "production") {
        var displayName = PageComponent.displayName || PageComponent.name || "Component";
        WithApollo.displayName = "withApollo(".concat(displayName, ")");
      }

      if (ssr || PageComponent.getInitialProps) {
        WithApollo.getInitialProps = /*#__PURE__*/function () {
          var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(ctx) {
            var inAppContext, _initOnContext, apolloClient, pageProps, AppTree, _yield$import, getDataFromTree, props;

            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    inAppContext = Boolean(ctx.ctx);
                    _initOnContext = initOnContext(ac, ctx), apolloClient = _initOnContext.apolloClient; // Run wrapped getInitialProps methods

                    pageProps = {};

                    if (!PageComponent.getInitialProps) {
                      _context.next = 9;
                      break;
                    }

                    _context.next = 6;
                    return PageComponent.getInitialProps(ctx);

                  case 6:
                    pageProps = _context.sent;
                    _context.next = 13;
                    break;

                  case 9:
                    if (!inAppContext) {
                      _context.next = 13;
                      break;
                    }

                    _context.next = 12;
                    return _app["default"].getInitialProps(ctx);

                  case 12:
                    pageProps = _context.sent;

                  case 13:
                    if (!(typeof window === "undefined")) {
                      _context.next = 32;
                      break;
                    }

                    AppTree = ctx.AppTree; // When redirecting, the response is finished.
                    // No point in continuing to render

                    if (!(ctx.res && ctx.res.finished)) {
                      _context.next = 17;
                      break;
                    }

                    return _context.abrupt("return", pageProps);

                  case 17:
                    if (!(ssr && AppTree)) {
                      _context.next = 32;
                      break;
                    }

                    _context.prev = 18;
                    _context.next = 21;
                    return Promise.resolve().then(function () {
                      return (0, _interopRequireWildcard2["default"])(require("@apollo/react-ssr"));
                    });

                  case 21:
                    _yield$import = _context.sent;
                    getDataFromTree = _yield$import.getDataFromTree;

                    if (inAppContext) {
                      props = _objectSpread(_objectSpread({}, pageProps), {}, {
                        apolloClient: apolloClient
                      });
                    } else {
                      props = {
                        pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {
                          apolloClient: apolloClient
                        })
                      };
                    } // Take the Next.js AppTree, determine which queries are needed to render,
                    // and fetch them. This method can be pretty slow since it renders
                    // your entire AppTree once for every query. Check out apollo fragments
                    // if you want to reduce the number of rerenders.
                    // https://www.apollographql.com/docs/react/data/fragments/


                    _context.next = 26;
                    return getDataFromTree( /*#__PURE__*/_react["default"].createElement(AppTree, props));

                  case 26:
                    _context.next = 31;
                    break;

                  case 28:
                    _context.prev = 28;
                    _context.t0 = _context["catch"](18);
                    // Prevent Apollo Client GraphQL errors from crashing SSR.
                    // Handle them in components via the data.error prop:
                    // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error
                    console.error("Error while running `getDataFromTree`", _context.t0);

                  case 31:
                    // getDataFromTree does not call componentWillUnmount
                    // head side effect therefore need to be cleared manually
                    _head["default"].rewind();

                  case 32:
                    return _context.abrupt("return", _objectSpread(_objectSpread({}, pageProps), {}, {
                      // Extract query data from the Apollo store
                      apolloState: apolloClient.cache.extract(),
                      // Provide the client for ssr. As soon as this payload
                      // gets JSON.stringified it will remove itself.
                      apolloClient: ctx.apolloClient
                    }));

                  case 33:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, null, [[18, 28]]);
          }));

          return function (_x) {
            return _ref3.apply(this, arguments);
          };
        }();
      }

      return WithApollo;
    };
  };
};

exports["default"] = _default;

function createApolloClient(apolloClient, initialState, ctx) {
  // The `ctx` (NextPageContext) will only be present on the server.
  // use it to extract auth headers (ctx.req) or similar.
  apolloClient.ssrMode = Boolean(ctx);
  apolloClient.cache.restore(initialState);
  return apolloClient;
}