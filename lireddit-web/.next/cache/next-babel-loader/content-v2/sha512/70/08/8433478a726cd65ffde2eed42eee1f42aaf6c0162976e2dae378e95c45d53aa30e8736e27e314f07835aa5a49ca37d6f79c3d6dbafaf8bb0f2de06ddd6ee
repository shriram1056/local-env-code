{"ast":null,"code":"import _defineProperty from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$();\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\\n    query Posts($limit: Int!, $cursor: String) {\\n  posts(cursor: $cursor, limit: $limit) {\\n    hasMore\\n    posts {\\n      ...PostSnippet\\n    }\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n    query Post($id: Int!) {\\n  post(id: $id) {\\n    id\\n    updatedAt\\n    createdAt\\n    title\\n    points\\n    text\\n    voteStatus\\n    creator {\\n      id\\n      username\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me {\\n    id\\n    username\\n  }\\n}\\n    \"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Vote($value: Int!, $postid: Int!) {\\n  vote(value: $value, postid: $postid)\\n}\\n    \"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Register($options: UsernamePasswordInput!) {\\n  register(options: $options) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Logout {\\n  logout\\n}\\n    \"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($usernameOrEmail: String!, $password: String!) {\\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation ForgotPassword($email: String!) {\\n  forgotPassword(email: $email)\\n}\\n    \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreatePost($input: PostInput!) {\\n  createPost(input: $input) {\\n    id\\n    createdAt\\n    updatedAt\\n    title\\n    creatorId\\n    text\\n  }\\n}\\n    \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation ChangePassword($token: String!, $newPassword: String!) {\\n  changePassword(token: $token, newPassword: $newPassword) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularUserResponse on UserResponse {\\n  errors {\\n    ...RegularError\\n  }\\n  user {\\n    ...RegularUser\\n  }\\n}\\n    \", \"\\n\", \"\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularUser on User {\\n  id\\n  username\\n}\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularError on FieldError {\\n  field\\n  message\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment PostSnippet on Post {\\n  id\\n  updatedAt\\n  createdAt\\n  title\\n  points\\n  textSnippet\\n  voteStatus\\n  creator {\\n    id\\n    email\\n    username\\n    createdAt\\n    updatedAt\\n  }\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport var PostSnippetFragmentDoc = gql(_templateObject());\nexport var RegularErrorFragmentDoc = gql(_templateObject2());\nexport var RegularUserFragmentDoc = gql(_templateObject3());\nexport var RegularUserResponseFragmentDoc = gql(_templateObject4(), RegularErrorFragmentDoc, RegularUserFragmentDoc);\nexport var ChangePasswordDocument = gql(_templateObject5(), RegularUserResponseFragmentDoc);\nexport function useChangePasswordMutation() {\n  _s();\n\n  return Urql.useMutation(ChangePasswordDocument);\n}\n\n_s(useChangePasswordMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Urql.useMutation];\n});\n\n;\nexport var CreatePostDocument = gql(_templateObject6());\nexport function useCreatePostMutation() {\n  _s2();\n\n  return Urql.useMutation(CreatePostDocument);\n}\n\n_s2(useCreatePostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Urql.useMutation];\n});\n\n;\nexport var ForgotPasswordDocument = gql(_templateObject7());\nexport function useForgotPasswordMutation() {\n  _s3();\n\n  return Urql.useMutation(ForgotPasswordDocument);\n}\n\n_s3(useForgotPasswordMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Urql.useMutation];\n});\n\n;\nexport var LoginDocument = gql(_templateObject8(), RegularUserResponseFragmentDoc);\nexport function useLoginMutation() {\n  _s4();\n\n  return Urql.useMutation(LoginDocument);\n}\n\n_s4(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Urql.useMutation];\n});\n\n;\nexport var LogoutDocument = gql(_templateObject9());\nexport function useLogoutMutation() {\n  _s5();\n\n  return Urql.useMutation(LogoutDocument);\n}\n\n_s5(useLogoutMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Urql.useMutation];\n});\n\n;\nexport var RegisterDocument = gql(_templateObject10(), RegularUserResponseFragmentDoc);\nexport function useRegisterMutation() {\n  _s6();\n\n  return Urql.useMutation(RegisterDocument);\n}\n\n_s6(useRegisterMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Urql.useMutation];\n});\n\n;\nexport var VoteDocument = gql(_templateObject11());\nexport function useVoteMutation() {\n  _s7();\n\n  return Urql.useMutation(VoteDocument);\n}\n\n_s7(useVoteMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Urql.useMutation];\n});\n\n;\nexport var MeDocument = gql(_templateObject12());\nexport function useMeQuery() {\n  _s8();\n\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Urql.useQuery(_objectSpread({\n    query: MeDocument\n  }, options));\n}\n\n_s8(useMeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Urql.useQuery];\n});\n\n;\nexport var PostDocument = gql(_templateObject13());\nexport function usePostQuery() {\n  _s9();\n\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Urql.useQuery(_objectSpread({\n    query: PostDocument\n  }, options));\n}\n\n_s9(usePostQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Urql.useQuery];\n});\n\n;\nexport var PostsDocument = gql(_templateObject14(), PostSnippetFragmentDoc);\nexport function usePostsQuery() {\n  _s10();\n\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Urql.useQuery(_objectSpread({\n    query: PostsDocument\n  }, options));\n}\n\n_s10(usePostsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Urql.useQuery];\n});\n\n;","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/generated/graphql.tsx"],"names":["gql","Urql","PostSnippetFragmentDoc","RegularErrorFragmentDoc","RegularUserFragmentDoc","RegularUserResponseFragmentDoc","ChangePasswordDocument","useChangePasswordMutation","useMutation","CreatePostDocument","useCreatePostMutation","ForgotPasswordDocument","useForgotPasswordMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","VoteDocument","useVoteMutation","MeDocument","useMeQuery","options","useQuery","query","PostDocument","usePostQuery","PostsDocument","usePostsQuery"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  posts: PaginatedPosts;\n  post?: Maybe<Post>;\n  me?: Maybe<User>;\n};\n\n\nexport type QueryPostsArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  limit: Scalars['Int'];\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['Int'];\n};\n\nexport type PaginatedPosts = {\n  __typename?: 'PaginatedPosts';\n  posts: Array<Post>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['Float'];\n  title: Scalars['String'];\n  text: Scalars['String'];\n  points: Scalars['Float'];\n  voteStatus?: Maybe<Scalars['Int']>;\n  creatorId: Scalars['Float'];\n  creator: User;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  textSnippet: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  vote: Scalars['Boolean'];\n  createPost: Post;\n  updatePost?: Maybe<Post>;\n  deletePost: Scalars['Boolean'];\n  changePassword: UserResponse;\n  forgotPassword: Scalars['Boolean'];\n  register: UserResponse;\n  login: UserResponse;\n  logout: Scalars['Boolean'];\n};\n\n\nexport type MutationVoteArgs = {\n  value: Scalars['Int'];\n  postid: Scalars['Int'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  input: PostInput;\n};\n\n\nexport type MutationUpdatePostArgs = {\n  title?: Maybe<Scalars['String']>;\n  id: Scalars['Float'];\n};\n\n\nexport type MutationDeletePostArgs = {\n  id: Scalars['Float'];\n};\n\n\nexport type MutationChangePasswordArgs = {\n  newPassword: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  usernameOrEmail: Scalars['String'];\n};\n\nexport type PostInput = {\n  title: Scalars['String'];\n  text: Scalars['String'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type UsernamePasswordInput = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type PostSnippetFragment = (\n  { __typename?: 'Post' }\n  & Pick<Post, 'id' | 'updatedAt' | 'createdAt' | 'title' | 'points' | 'textSnippet' | 'voteStatus'>\n  & { creator: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'username' | 'createdAt' | 'updatedAt'>\n  ) }\n);\n\nexport type RegularErrorFragment = (\n  { __typename?: 'FieldError' }\n  & Pick<FieldError, 'field' | 'message'>\n);\n\nexport type RegularUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'username'>\n);\n\nexport type RegularUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, user?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type ChangePasswordMutationVariables = Exact<{\n  token: Scalars['String'];\n  newPassword: Scalars['String'];\n}>;\n\n\nexport type ChangePasswordMutation = (\n  { __typename?: 'Mutation' }\n  & { changePassword: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type CreatePostMutationVariables = Exact<{\n  input: PostInput;\n}>;\n\n\nexport type CreatePostMutation = (\n  { __typename?: 'Mutation' }\n  & { createPost: (\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'createdAt' | 'updatedAt' | 'title' | 'creatorId' | 'text'>\n  ) }\n);\n\nexport type ForgotPasswordMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type ForgotPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'forgotPassword'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  usernameOrEmail: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type VoteMutationVariables = Exact<{\n  value: Scalars['Int'];\n  postid: Scalars['Int'];\n}>;\n\n\nexport type VoteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'vote'>\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username'>\n  )> }\n);\n\nexport type PostQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type PostQuery = (\n  { __typename?: 'Query' }\n  & { post?: Maybe<(\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'updatedAt' | 'createdAt' | 'title' | 'points' | 'text' | 'voteStatus'>\n    & { creator: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username'>\n    ) }\n  )> }\n);\n\nexport type PostsQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type PostsQuery = (\n  { __typename?: 'Query' }\n  & { posts: (\n    { __typename?: 'PaginatedPosts' }\n    & Pick<PaginatedPosts, 'hasMore'>\n    & { posts: Array<(\n      { __typename?: 'Post' }\n      & PostSnippetFragment\n    )> }\n  ) }\n);\n\nexport const PostSnippetFragmentDoc = gql`\n    fragment PostSnippet on Post {\n  id\n  updatedAt\n  createdAt\n  title\n  points\n  textSnippet\n  voteStatus\n  creator {\n    id\n    email\n    username\n    createdAt\n    updatedAt\n  }\n}\n    `;\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const ChangePasswordDocument = gql`\n    mutation ChangePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\nexport function useChangePasswordMutation() {\n  return Urql.useMutation<ChangePasswordMutation, ChangePasswordMutationVariables>(ChangePasswordDocument);\n};\nexport const CreatePostDocument = gql`\n    mutation CreatePost($input: PostInput!) {\n  createPost(input: $input) {\n    id\n    createdAt\n    updatedAt\n    title\n    creatorId\n    text\n  }\n}\n    `;\n\nexport function useCreatePostMutation() {\n  return Urql.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument);\n};\nexport const ForgotPasswordDocument = gql`\n    mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\n\nexport function useForgotPasswordMutation() {\n  return Urql.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument);\n};\nexport const LoginDocument = gql`\n    mutation Login($usernameOrEmail: String!, $password: String!) {\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\nexport function useLoginMutation() {\n  return Urql.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument);\n};\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\nexport function useLogoutMutation() {\n  return Urql.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument);\n};\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\nexport function useRegisterMutation() {\n  return Urql.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument);\n};\nexport const VoteDocument = gql`\n    mutation Vote($value: Int!, $postid: Int!) {\n  vote(value: $value, postid: $postid)\n}\n    `;\n\nexport function useVoteMutation() {\n  return Urql.useMutation<VoteMutation, VoteMutationVariables>(VoteDocument);\n};\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    username\n  }\n}\n    `;\n\nexport function useMeQuery(options: Omit<Urql.UseQueryArgs<MeQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<MeQuery>({ query: MeDocument, ...options });\n};\nexport const PostDocument = gql`\n    query Post($id: Int!) {\n  post(id: $id) {\n    id\n    updatedAt\n    createdAt\n    title\n    points\n    text\n    voteStatus\n    creator {\n      id\n      username\n    }\n  }\n}\n    `;\n\nexport function usePostQuery(options: Omit<Urql.UseQueryArgs<PostQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<PostQuery>({ query: PostDocument, ...options });\n};\nexport const PostsDocument = gql`\n    query Posts($limit: Int!, $cursor: String) {\n  posts(cursor: $cursor, limit: $limit) {\n    hasMore\n    posts {\n      ...PostSnippet\n    }\n  }\n}\n    ${PostSnippetFragmentDoc}`;\n\nexport function usePostsQuery(options: Omit<Urql.UseQueryArgs<PostsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<PostsQuery>({ query: PostsDocument, ...options });\n};"]},"metadata":{},"sourceType":"module"}