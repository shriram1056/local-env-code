{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/lireddit/lireddit-web/src/components/updootSection.tsx\";\nimport { ChevronDownIcon, ChevronUpIcon } from '@chakra-ui/icons';\nimport { Flex, IconButton } from '@chakra-ui/react';\nimport gql from 'graphql-tag';\nimport React, { useState } from 'react';\nimport { useVoteMutation } from '../generated/graphql';\n// this props is passed in index\nexport const UpdootSection = ({\n  post\n}) => {\n  const {\n    0: loadingState,\n    1: setLoadingState\n  } = useState('not-loading'); // there are 3 types in this\n\n  const [vote] = useVoteMutation();\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    direction: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    mr: 4,\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: async () => {\n        if (post.voteStatus === 1) {\n          return;\n        }\n\n        setLoadingState('updoot-loading');\n        await vote({\n          variables: {\n            postid: post.id,\n            value: 1\n          },\n          update: (cache, {}) => {\n            const data = cache.readFragment({\n              id: 'Post:' + post.id,\n              fragment: gql`\n                  fragment _ on Post {\n                    id\n                    points\n                    voteStatus\n                  }\n                `\n            });\n\n            if (data) {\n              // don't update the cache if if the same button isclicked\n              if (data.voteStatus === value) {\n                console.log('def');\n                return;\n              }\n\n              const newPoints = data.points + (!data.voteStatus ? 1 : 2) * value; // the default of vote status is null if null use 1 else 2\n\n              cache.writeFragment(gql`\n                    fragment __ on Post {\n                      points\n                      voteStatus\n                    }\n                  `, {\n                id: postid,\n                points: newPoints,\n                voteStatus: value\n              });\n            }\n          }\n        });\n        setLoadingState('not-loading');\n      },\n      colorScheme: post.voteStatus === 1 ? 'green' : undefined,\n      isLoading: loadingState === 'updoot-loading' // loading state made by user\n      ,\n      \"aria-label\": \"updoot post\",\n      icon: /*#__PURE__*/_jsxDEV(ChevronUpIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), post.points, /*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: async () => {\n        if (post.voteStatus === -1) {\n          return;\n        }\n\n        setLoadingState('downdoot-loading');\n        await vote({\n          variables: {\n            postid: post.id,\n            value: -1\n          }\n        });\n        setLoadingState('not-loading');\n      },\n      colorScheme: post.voteStatus === -1 ? 'red' : undefined,\n      isLoading: loadingState === 'downdoot-loading',\n      \"aria-label\": \"downdoot post\",\n      icon: /*#__PURE__*/_jsxDEV(ChevronDownIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/components/updootSection.tsx"],"names":["ChevronDownIcon","ChevronUpIcon","Flex","IconButton","gql","React","useState","useVoteMutation","UpdootSection","post","loadingState","setLoadingState","vote","voteStatus","variables","postid","id","value","update","cache","data","readFragment","fragment","console","log","newPoints","points","writeFragment","undefined"],"mappings":"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","sourcesContent":["import { ChevronDownIcon, ChevronUpIcon } from '@chakra-ui/icons'\nimport { Flex, IconButton } from '@chakra-ui/react'\nimport gql from 'graphql-tag'\nimport React, { useState } from 'react'\nimport {\n  PostSnippetFragment,\n  PostsQuery,\n  useVoteMutation,\n} from '../generated/graphql'\n\ninterface UpdootSectionProps {\n  post: PostsQuery['posts']['posts'][0]\n}\n// this props is passed in index\n\nexport const UpdootSection: React.FC<UpdootSectionProps> = ({ post }) => {\n  const [loadingState, setLoadingState] = useState<\n    'updoot-loading' | 'downdoot-loading' | 'not-loading'\n  >('not-loading') // there are 3 types in this\n  const [vote] = useVoteMutation()\n  return (\n    <Flex direction=\"column\" justifyContent=\"center\" alignItems=\"center\" mr={4}>\n      <IconButton\n        onClick={async () => {\n          if (post.voteStatus === 1) {\n            return\n          }\n          setLoadingState('updoot-loading')\n          await vote({\n            variables: {\n              postid: post.id,\n              value: 1,\n            },\n            update: (cache, {}) => {\n              const data = cache.readFragment<PostSnippetFragment>({\n                id: 'Post:' + post.id,\n                fragment: gql`\n                  fragment _ on Post {\n                    id\n                    points\n                    voteStatus\n                  }\n                `,\n              })\n              if (data) {\n                // don't update the cache if if the same button isclicked\n                if (data.voteStatus === value) {\n                  console.log('def')\n                  return\n                }\n                const newPoints =\n                  (data.points as number) + (!data.voteStatus ? 1 : 2) * value // the default of vote status is null if null use 1 else 2\n                cache.writeFragment(\n                  gql`\n                    fragment __ on Post {\n                      points\n                      voteStatus\n                    }\n                  `,\n                  { id: postid, points: newPoints, voteStatus: value } as any\n                )\n              }\n            },\n          })\n          setLoadingState('not-loading')\n        }}\n        colorScheme={post.voteStatus === 1 ? 'green' : undefined}\n        isLoading={loadingState === 'updoot-loading'} // loading state made by user\n        aria-label=\"updoot post\"\n        icon={<ChevronUpIcon />}\n      />\n      {post.points}\n      <IconButton\n        onClick={async () => {\n          if (post.voteStatus === -1) {\n            return\n          }\n          setLoadingState('downdoot-loading')\n          await vote({\n            variables: {\n              postid: post.id,\n              value: -1,\n            },\n          })\n          setLoadingState('not-loading')\n        }}\n        colorScheme={post.voteStatus === -1 ? 'red' : undefined}\n        isLoading={loadingState === 'downdoot-loading'}\n        aria-label=\"downdoot post\"\n        icon={<ChevronDownIcon />}\n      />\n    </Flex>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}