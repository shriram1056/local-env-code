{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/lireddit/lireddit-web/src/pages/post/[id].tsx\";\nimport { withUrqlClient } from 'next-urql';\nimport { useRouter } from 'next/router';\nimport { Layout } from '../../components/Layout';\nimport { usePostQuery } from '../../generated/graphql';\nimport { createUrqlClient } from '../../utils/createUrqlClient';\n\nconst Post = ({}) => {\n  var _data$post;\n\n  const router = useRouter();\n  const intId = typeof router.query.id === 'string' ? parseInt(router.query.id) : -1;\n  const [{\n    data,\n    fetching\n  }] = usePostQuery({\n    variables: {\n      id: intId\n    }\n  });\n\n  if (fetching) {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: data === null || data === void 0 ? void 0 : (_data$post = data.post) === null || _data$post === void 0 ? void 0 : _data$post.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n};\n\nexport default withUrqlClient(createUrqlClient, {\n  ssr: true\n})(Post);","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/pages/post/[id].tsx"],"names":["withUrqlClient","useRouter","Layout","usePostQuery","createUrqlClient","Post","router","intId","query","id","parseInt","data","fetching","variables","post","text","ssr"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,WAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;;AAEA,MAAMC,IAAI,GAAG,CAAC,EAAD,KAAQ;AAAA;;AACnB,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAMM,KAAK,GACT,OAAOD,MAAM,CAACE,KAAP,CAAaC,EAApB,KAA2B,QAA3B,GAAsCC,QAAQ,CAACJ,MAAM,CAACE,KAAP,CAAaC,EAAd,CAA9C,GAAkE,CAAC,CADrE;AAEA,QAAM,CAAC;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,IAAuBT,YAAY,CAAC;AACxCU,IAAAA,SAAS,EAAE;AACTJ,MAAAA,EAAE,EAAEF;AADK;AAD6B,GAAD,CAAzC;;AAKA,MAAIK,QAAJ,EAAc;AACZ,wBACE,QAAC,MAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AACD,sBAAO,QAAC,MAAD;AAAA,cAASD,IAAT,aAASA,IAAT,qCAASA,IAAI,CAAEG,IAAf,+CAAS,WAAYC;AAArB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjBD;;AAmBA,eAAef,cAAc,CAACI,gBAAD,EAAmB;AAAEY,EAAAA,GAAG,EAAE;AAAP,CAAnB,CAAd,CAAgDX,IAAhD,CAAf","sourcesContent":["import { withUrqlClient } from 'next-urql'\nimport { useRouter } from 'next/router'\nimport { Layout } from '../../components/Layout'\nimport { usePostQuery } from '../../generated/graphql'\nimport { createUrqlClient } from '../../utils/createUrqlClient'\n\nconst Post = ({}) => {\n  const router = useRouter()\n  const intId =\n    typeof router.query.id === 'string' ? parseInt(router.query.id) : -1\n  const [{ data, fetching }] = usePostQuery({\n    variables: {\n      id: intId,\n    },\n  })\n  if (fetching) {\n    return (\n      <Layout>\n        <div>loading...</div>\n      </Layout>\n    )\n  }\n  return <Layout>{data?.post?.text}</Layout>\n}\n\nexport default withUrqlClient(createUrqlClient, { ssr: true })(Post)\n"]},"metadata":{},"sourceType":"module"}