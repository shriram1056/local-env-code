{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/lireddit/lireddit-web/src/components/updootSection.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n        fragment __ on Post {\\n          points\\n          voteStatus\\n        }\\n      \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      fragment _ on Post {\\n        id\\n        points\\n        voteStatus\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { ChevronDownIcon, ChevronUpIcon } from '@chakra-ui/icons';\nimport { Flex, IconButton } from '@chakra-ui/react';\nimport gql from 'graphql-tag';\nimport React, { useState } from 'react';\nimport { useVoteMutation } from '../generated/graphql';\n\n// this props is passed in index\nvar updateAfterVote = function updateAfterVote(value, postId, cache) {\n  var data = cache.readFragment({\n    id: 'Post:' + postId,\n    fragment: gql(_templateObject())\n  });\n\n  if (data) {\n    if (data.voteStatus === value) {\n      return;\n    }\n\n    var newPoints = data.points + (!data.voteStatus ? 1 : 2) * value;\n    cache.writeFragment({\n      id: 'Post:' + postId,\n      fragment: gql(_templateObject2()),\n      data: {\n        points: newPoints,\n        voteStatus: value\n      }\n    });\n  }\n};\n\nexport var UpdootSection = function UpdootSection(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useState = useState('not-loading'),\n      loadingState = _useState[0],\n      setLoadingState = _useState[1]; // there are 3 types in this\n\n\n  var _useVoteMutation = useVoteMutation(),\n      _useVoteMutation2 = _slicedToArray(_useVoteMutation, 1),\n      vote = _useVoteMutation2[0];\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    direction: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    mr: 4,\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(post.voteStatus === 1)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                setLoadingState('updoot-loading');\n                _context.next = 5;\n                return vote({\n                  variables: {\n                    postid: post.id,\n                    value: 1\n                  },\n                  update: function update(cache) {\n                    return updateAfterVote(1, post.id, cache);\n                  }\n                });\n\n              case 5:\n                setLoadingState('not-loading');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })),\n      colorScheme: post.voteStatus === 1 ? 'green' : undefined,\n      isLoading: loadingState === 'updoot-loading' // loading state made by user\n      ,\n      \"aria-label\": \"updoot post\",\n      icon: /*#__PURE__*/_jsxDEV(ChevronUpIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, _this), post.points, /*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(post.voteStatus === -1)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                setLoadingState('downdoot-loading');\n                _context2.next = 5;\n                return vote({\n                  variables: {\n                    postid: post.id,\n                    value: -1\n                  },\n                  update: function update(cache) {\n                    return updateAfterVote(1, post.id, cache);\n                  }\n                });\n\n              case 5:\n                setLoadingState('not-loading');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })),\n      colorScheme: post.voteStatus === -1 ? 'red' : undefined,\n      isLoading: loadingState === 'downdoot-loading',\n      \"aria-label\": \"downdoot post\",\n      icon: /*#__PURE__*/_jsxDEV(ChevronDownIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(UpdootSection, \"Dg0TeehLzpz0dRLKWhypJCpTVfE=\", false, function () {\n  return [useVoteMutation];\n});\n\n_c = UpdootSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdootSection\");","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/components/updootSection.tsx"],"names":["ChevronDownIcon","ChevronUpIcon","Flex","IconButton","gql","React","useState","useVoteMutation","updateAfterVote","value","postId","cache","data","readFragment","id","fragment","voteStatus","newPoints","points","writeFragment","UpdootSection","post","loadingState","setLoadingState","vote","variables","postid","update","undefined"],"mappings":"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","sourcesContent":["import { ApolloCache } from '@apollo/client'\nimport { ChevronDownIcon, ChevronUpIcon } from '@chakra-ui/icons'\nimport { Flex, IconButton } from '@chakra-ui/react'\nimport gql from 'graphql-tag'\nimport React, { useState } from 'react'\nimport { PostsQuery, useVoteMutation, VoteMutation } from '../generated/graphql'\n\ninterface UpdootSectionProps {\n  post: PostsQuery['posts']['posts'][0]\n}\n// this props is passed in index\nconst updateAfterVote = (\n  value: number,\n  postId: number,\n  cache: ApolloCache<VoteMutation>\n) => {\n  const data = cache.readFragment<{\n    id: number\n    points: number\n    voteStatus: number | null\n  }>({\n    id: 'Post:' + postId,\n    fragment: gql`\n      fragment _ on Post {\n        id\n        points\n        voteStatus\n      }\n    `,\n  })\n\n  if (data) {\n    if (data.voteStatus === value) {\n      return\n    }\n    const newPoints =\n      (data.points as number) + (!data.voteStatus ? 1 : 2) * value\n    cache.writeFragment({\n      id: 'Post:' + postId,\n      fragment: gql`\n        fragment __ on Post {\n          points\n          voteStatus\n        }\n      `,\n      data: { points: newPoints, voteStatus: value },\n    })\n  }\n}\nexport const UpdootSection: React.FC<UpdootSectionProps> = ({ post }) => {\n  const [loadingState, setLoadingState] = useState<\n    'updoot-loading' | 'downdoot-loading' | 'not-loading'\n  >('not-loading') // there are 3 types in this\n  const [vote] = useVoteMutation()\n  return (\n    <Flex direction=\"column\" justifyContent=\"center\" alignItems=\"center\" mr={4}>\n      <IconButton\n        onClick={async () => {\n          if (post.voteStatus === 1) {\n            return\n          }\n          setLoadingState('updoot-loading')\n          await vote({\n            variables: {\n              postid: post.id,\n              value: 1,\n            },\n            update: (cache) => updateAfterVote(1, post.id, cache),\n          })\n          setLoadingState('not-loading')\n        }}\n        colorScheme={post.voteStatus === 1 ? 'green' : undefined}\n        isLoading={loadingState === 'updoot-loading'} // loading state made by user\n        aria-label=\"updoot post\"\n        icon={<ChevronUpIcon />}\n      />\n      {post.points}\n      <IconButton\n        onClick={async () => {\n          if (post.voteStatus === -1) {\n            return\n          }\n          setLoadingState('downdoot-loading')\n          await vote({\n            variables: {\n              postid: post.id,\n              value: -1,\n            },\n            update: (cache) => updateAfterVote(1, post.id, cache),\n          })\n          setLoadingState('not-loading')\n        }}\n        colorScheme={post.voteStatus === -1 ? 'red' : undefined}\n        isLoading={loadingState === 'downdoot-loading'}\n        aria-label=\"downdoot post\"\n        icon={<ChevronDownIcon />}\n      />\n    </Flex>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}