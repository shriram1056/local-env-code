{"version":3,"file":"react-ssr-prepass.production.min.js","sources":["../src/symbols.js","../src/element.js","../src/internals/context.js","../src/internals/dispatcher.js","../src/render/lazyComponent.js","../src/render/functionComponent.js","../src/render/classComponent.js","../src/visitor.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport type { Node } from 'react'\nimport * as is from 'react-is'\n\n/** Literal types representing the ReactSymbol values. These values do not actually match the values from react-is! */\nexport type ReactSymbol =\n  | 'react.element' /* 0xeac7 | Symbol(react.element) */\n  | 'react.portal' /* 0xeaca | Symbol(react.portal) */\n  | 'react.fragment' /* 0xeacb | Symbol(react.fragment) */\n  | 'react.strict_mode' /* 0xeacc | Symbol(react.strict_mode) */\n  | 'react.profiler' /* 0xead2 | Symbol(react.profiler) */\n  | 'react.provider' /* 0xeacd | Symbol(react.provider) */\n  | 'react.context' /* 0xeace | Symbol(react.context) */\n  | 'react.concurrent_mode' /* 0xeacf | Symbol(react.concurrent_mode) */\n  | 'react.forward_ref' /* 0xead0 | Symbol(react.forward_ref) */\n  | 'react.suspense' /* 0xead1 | Symbol(react.suspense) */\n  | 'react.memo' /* 0xead3 | Symbol(react.memo) */\n  | 'react.lazy' /* 0xead4 | Symbol(react.lazy) */\n\nexport const REACT_ELEMENT_TYPE: 'react.element' = is.Element\nexport const REACT_PORTAL_TYPE: 'react.portal' = is.Portal\nexport const REACT_FRAGMENT_TYPE: 'react.fragment' = is.Fragment\nexport const REACT_STRICT_MODE_TYPE: 'react.strict_mode' = is.StrictMode\nexport const REACT_PROFILER_TYPE: 'react.profiler' = is.Profiler\nexport const REACT_PROVIDER_TYPE: 'react.provider' = is.ContextProvider\nexport const REACT_CONTEXT_TYPE: 'react.context' = is.ContextConsumer\nexport const REACT_CONCURRENT_MODE_TYPE: 'react.concurrent_mode' =\n  is.ConcurrentMode\nexport const REACT_FORWARD_REF_TYPE: 'react.forward_ref' = is.ForwardRef\nexport const REACT_SUSPENSE_TYPE: 'react.suspense' = is.Suspense\nexport const REACT_MEMO_TYPE: 'react.memo' = is.Memo\nexport const REACT_LAZY_TYPE: 'react.lazy' = is.Lazy\n","// @flow\n\nimport { Children, type Node, type Element, type ComponentType } from 'react'\nimport type { AbstractContext, AbstractElement } from './types'\nimport * as ReactIs from 'react-is'\n\nimport {\n  type ReactSymbol,\n  REACT_ELEMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_CONCURRENT_MODE_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE\n} from './symbols'\n\n/** Is a given Component a class component */\nexport const shouldConstruct = (Comp: ComponentType<*>): boolean %checks =>\n  (Comp: any).prototype && (Comp: any).prototype.isReactComponent\n\n/** Determine the type of element using react-is with applied fixes */\nexport const typeOf = (x: AbstractElement): ReactSymbol | void => {\n  switch (x.$$typeof) {\n    case REACT_PORTAL_TYPE:\n      return REACT_PORTAL_TYPE\n    case REACT_ELEMENT_TYPE:\n      switch (x.type) {\n        case REACT_CONCURRENT_MODE_TYPE:\n          return REACT_CONCURRENT_MODE_TYPE\n        case REACT_FRAGMENT_TYPE:\n          return REACT_FRAGMENT_TYPE\n        case REACT_PROFILER_TYPE:\n          return REACT_PROFILER_TYPE\n        case REACT_STRICT_MODE_TYPE:\n          return REACT_STRICT_MODE_TYPE\n        case REACT_SUSPENSE_TYPE:\n          return REACT_SUSPENSE_TYPE\n\n        default: {\n          switch (x.type && ((x.type: any).$$typeof: ReactSymbol)) {\n            case REACT_LAZY_TYPE:\n              return REACT_LAZY_TYPE\n            case REACT_MEMO_TYPE:\n              return REACT_MEMO_TYPE\n            case REACT_CONTEXT_TYPE:\n              return REACT_CONTEXT_TYPE\n            case REACT_PROVIDER_TYPE:\n              return REACT_PROVIDER_TYPE\n            case REACT_FORWARD_REF_TYPE:\n              return REACT_FORWARD_REF_TYPE\n            default:\n              return REACT_ELEMENT_TYPE\n          }\n        }\n      }\n\n    default:\n      return undefined\n  }\n}\n\ntype ScalarNode = null | boolean | string | number\n\n/** Rebound Children.toArray with modified AbstractElement types */\nconst toArray: (node?: Node) => Array<ScalarNode | AbstractElement> =\n  Children.toArray\n\n/** Checks whether the `node` is an AbstractElement */\nconst isAbstractElement = (\n  node: ScalarNode | AbstractElement\n): boolean %checks =>\n  node !== null && typeof node === 'object'\n\n/** Returns a flat AbstractElement array for a given AbstractElement node */\nexport const getChildrenArray = (node?: Node): AbstractElement[] => {\n  // $FlowFixMe\n  return toArray(node).filter(isAbstractElement)\n}\n\n/** Returns merged props given a props and defaultProps object */\nexport const computeProps = (props: Object, defaultProps: void | Object) => {\n  return typeof defaultProps === 'object'\n    ? Object.assign({}, defaultProps, props)\n    : props\n}\n","// @flow\n\nimport type {\n  AbstractContext,\n  UserElement,\n  ContextMap,\n  ContextStore,\n  ContextEntry\n} from '../types'\n\n/** The context is kept as a Map from a Context value to the current\n   value on the React element tree.\n   The legacy context is kept as a simple object.\n   When the tree is being walked modifications are made by assigning\n   new legacy context maps or new context values.\n   These changes are kept in the `prev` variables and must be flushed\n   before continuing to walk the tree.\n   After walking the children they can be restored.\n   This way the context recursively restores itself on the way up. */\n\nlet currentContextStore: ContextStore = new Map()\nlet currentContextMap: ContextMap = {}\n\nlet prevContextMap: void | ContextMap = undefined\nlet prevContextEntry: void | ContextEntry = undefined\n\nexport const getCurrentContextMap = (): ContextMap =>\n  Object.assign({}, currentContextMap)\nexport const getCurrentContextStore = (): ContextStore =>\n  new Map(currentContextStore)\n\nexport const flushPrevContextMap = (): void | ContextMap => {\n  const prev = prevContextMap\n  prevContextMap = undefined\n  return prev\n}\n\nexport const flushPrevContextStore = (): void | ContextEntry => {\n  const prev = prevContextEntry\n  prevContextEntry = undefined\n  return prev\n}\n\nexport const restoreContextMap = (prev: void | ContextMap) => {\n  if (prev !== undefined) {\n    Object.assign(currentContextMap, prev)\n  }\n}\n\nexport const restoreContextStore = (prev: void | ContextEntry) => {\n  if (prev !== undefined) {\n    currentContextStore.set(prev[0], prev[1])\n  }\n}\n\nexport const setCurrentContextMap = (map: ContextMap) => {\n  prevContextMap = undefined\n  currentContextMap = map\n}\n\nexport const setCurrentContextStore = (store: ContextStore) => {\n  prevContextEntry = undefined\n  currentContextStore = store\n}\n\nexport const assignContextMap = (map: ContextMap) => {\n  prevContextMap = {}\n  for (const name in map) {\n    prevContextMap[name] = currentContextMap[name]\n    currentContextMap[name] = map[name]\n  }\n}\n\nexport const setContextValue = (context: AbstractContext, value: mixed) => {\n  prevContextEntry = [context, currentContextStore.get(context)]\n  currentContextStore.set(context, value)\n}\n\nexport const readContextValue = (context: AbstractContext) => {\n  const value = currentContextStore.get(context)\n  if (value !== undefined) {\n    return value\n  }\n\n  // Return default if context has no value yet\n  return context._currentValue\n}\n\nconst emptyContext = {}\n\nexport const maskContext = (type: $PropertyType<UserElement, 'type'>) => {\n  const { contextType, contextTypes } = type\n\n  if (contextType) {\n    return readContextValue(contextType)\n  } else if (!contextTypes) {\n    return emptyContext\n  }\n\n  const maskedContext = {}\n  for (const name in contextTypes) {\n    maskedContext[name] = currentContextMap[name]\n  }\n\n  return maskedContext\n}\n","// @flow\n// Source: https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js\n\nimport is from 'object-is'\nimport { readContextValue } from './context'\n\nimport type {\n  AbstractContext,\n  BasicStateAction,\n  Dispatch,\n  Update,\n  UpdateQueue,\n  Hook\n} from '../types'\n\nexport opaque type Identity = {}\n\nlet currentIdentity: Identity | null = null\n\nexport const makeIdentity = (): Identity => ({})\n\nexport const setCurrentIdentity = (id: Identity | null) => {\n  currentIdentity = id\n}\n\nexport const getCurrentIdentity = (): Identity => {\n  if (currentIdentity === null) {\n    throw new Error(\n      '[react-ssr-prepass] Hooks can only be called inside the body of a function component. ' +\n        '(https://fb.me/react-invalid-hook-call)'\n    )\n  }\n\n  // NOTE: The warning that is used in ReactPartialRendererHooks is obsolete\n  // in a prepass, since it'll be caught by a subsequent renderer anyway\n  // https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L63-L71\n\n  return (currentIdentity: Identity)\n}\n\nlet firstWorkInProgressHook: Hook | null = null\nlet workInProgressHook: Hook | null = null\n// Whether an update was scheduled during the currently executing render pass.\nlet didScheduleRenderPhaseUpdate: boolean = false\n// Lazily created map of render-phase updates\nlet renderPhaseUpdates: Map<UpdateQueue<any>, Update<any>> | null = null\n// Counter to prevent infinite loops.\nlet numberOfReRenders: number = 0\nconst RE_RENDER_LIMIT = 25\n\nexport const getFirstHook = (): Hook | null => firstWorkInProgressHook\n\nexport const setFirstHook = (hook: Hook | null) => {\n  firstWorkInProgressHook = hook\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null\n) {\n  // NOTE: The warnings that are used in ReactPartialRendererHooks are obsolete\n  // in a prepass, since these issues will be caught by a subsequent renderer anyway\n  if (prevDeps === null) return false\n\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (!is(nextDeps[i], prevDeps[i])) return false\n  }\n\n  return true\n}\n\nfunction createHook(): Hook {\n  return {\n    memoizedState: null,\n    queue: null,\n    next: null\n  }\n}\n\nfunction createWorkInProgressHook(): Hook {\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    if (firstWorkInProgressHook === null) {\n      return (firstWorkInProgressHook = workInProgressHook = createHook())\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      return (workInProgressHook = firstWorkInProgressHook)\n    }\n  } else {\n    if (workInProgressHook.next === null) {\n      // Append to the end of the list\n      return (workInProgressHook = workInProgressHook.next = createHook())\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      return (workInProgressHook = workInProgressHook.next)\n    }\n  }\n}\n\nexport function renderWithHooks(\n  Component: any,\n  props: any,\n  refOrContext: any\n): any {\n  workInProgressHook = null\n  let children = Component(props, refOrContext)\n\n  // NOTE: Excessive rerenders won't throw but will instead abort rendering\n  // since a subsequent renderer can throw when this issue occurs instead\n  while (numberOfReRenders < RE_RENDER_LIMIT && didScheduleRenderPhaseUpdate) {\n    // Updates were scheduled during the render phase. They are stored in\n    // the `renderPhaseUpdates` map. Call the component again, reusing the\n    // work-in-progress hooks and applying the additional updates on top. Keep\n    // restarting until no more updates are scheduled.\n    didScheduleRenderPhaseUpdate = false\n    numberOfReRenders += 1\n    // Start over from the beginning of the list\n    workInProgressHook = null\n    children = Component(props, refOrContext)\n  }\n\n  // This will be reset by renderer\n  // firstWorkInProgressHook = null\n\n  numberOfReRenders = 0\n  renderPhaseUpdates = null\n  workInProgressHook = null\n\n  return children\n}\n\nfunction readContext(context: AbstractContext, _: void | number | boolean) {\n  // NOTE: The warning that is used in ReactPartialRendererHooks is obsolete\n  // in a prepass, since it'll be caught by a subsequent renderer anyway\n  // https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L215-L223\n  return readContextValue(context)\n}\n\nfunction useContext(context: AbstractContext, _: void | number | boolean) {\n  getCurrentIdentity()\n  return readContextValue(context)\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe\n  return typeof action === 'function' ? action(state) : action\n}\n\nfunction useState<S>(\n  initialState: (() => S) | S\n): [S, Dispatch<BasicStateAction<S>>] {\n  return useReducer(\n    basicStateReducer,\n    // useReducer has a special case to support lazy useState initializers\n    (initialState: any)\n  )\n}\n\nfunction useReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S\n): [S, Dispatch<A>] {\n  const id = getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n\n  // In the case of a re-render after a suspense, the initial state\n  // may not be set, so instead of initialising if `!isRerender`, we\n  // check whether `queue` is set\n  if (workInProgressHook.queue === null) {\n    let initialState\n    if (reducer === basicStateReducer) {\n      // Special case for `useState`.\n      initialState =\n        typeof initialArg === 'function'\n          ? ((initialArg: any): () => S)()\n          : ((initialArg: any): S)\n    } else {\n      initialState =\n        init !== undefined ? init(initialArg) : ((initialArg: any): S)\n    }\n\n    workInProgressHook.memoizedState = initialState\n  }\n\n  const queue: UpdateQueue<A> =\n    workInProgressHook.queue ||\n    (workInProgressHook.queue = { last: null, dispatch: null })\n  const dispatch: Dispatch<A> =\n    queue.dispatch || (queue.dispatch = dispatchAction.bind(null, id, queue))\n\n  if (renderPhaseUpdates !== null) {\n    // This is a re-render. Apply the new render phase updates to the previous\n    // current hook.\n    // Render phase updates are stored in a map of queue -> linked list\n    const firstRenderPhaseUpdate = renderPhaseUpdates.get(queue)\n    if (firstRenderPhaseUpdate !== undefined) {\n      renderPhaseUpdates.delete(queue)\n      let newState = workInProgressHook.memoizedState\n      let update = firstRenderPhaseUpdate\n      do {\n        // Process this render phase update. We don't have to check the\n        // priority because it will always be the same as the current\n        // render's.\n        const action = update.action\n        newState = reducer(newState, action)\n        update = update.next\n      } while (update !== null)\n\n      workInProgressHook.memoizedState = newState\n    }\n  }\n\n  return [workInProgressHook.memoizedState, dispatch]\n}\n\nfunction useMemo<T>(nextCreate: () => T, deps: Array<mixed> | void | null): T {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n\n  const nextDeps = deps === undefined ? null : deps\n  const prevState = workInProgressHook.memoizedState\n  if (prevState !== null && nextDeps !== null) {\n    const prevDeps = prevState[1]\n    if (areHookInputsEqual(nextDeps, prevDeps)) {\n      return prevState[0]\n    }\n  }\n\n  const nextValue = nextCreate()\n  workInProgressHook.memoizedState = [nextValue, nextDeps]\n  return nextValue\n}\n\nfunction useRef<T>(initialValue: T): { current: T } {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n  const previousRef = workInProgressHook.memoizedState\n  if (previousRef === null) {\n    const ref = { current: initialValue }\n    workInProgressHook.memoizedState = ref\n    return ref\n  } else {\n    return previousRef\n  }\n}\n\nfunction dispatchAction<A>(\n  componentIdentity: Identity,\n  queue: UpdateQueue<A>,\n  action: A\n) {\n  if (componentIdentity === currentIdentity) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdate = true\n    const update: Update<A> = {\n      action,\n      next: null\n    }\n    if (renderPhaseUpdates === null) {\n      renderPhaseUpdates = new Map()\n    }\n    const firstRenderPhaseUpdate = renderPhaseUpdates.get(queue)\n    if (firstRenderPhaseUpdate === undefined) {\n      renderPhaseUpdates.set(queue, update)\n    } else {\n      // Append the update to the end of the list.\n      let lastRenderPhaseUpdate = firstRenderPhaseUpdate\n      while (lastRenderPhaseUpdate.next !== null) {\n        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next\n      }\n      lastRenderPhaseUpdate.next = update\n    }\n  } else {\n    // This means an update has happened after the function component has\n    // returned. On the server this is a no-op. In React Fiber, the update\n    // would be scheduled for a future render.\n  }\n}\n\nfunction useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  return useMemo(() => callback, deps)\n}\n\nfunction noop(): void {}\n\nfunction useTransition(): [(callback: () => void) => void, boolean] {\n  const startTransition = callback => {\n    callback()\n  }\n  return [startTransition, false]\n}\n\nfunction useDeferredValue<T>(input: T): T {\n  return input\n}\n\nexport const Dispatcher = {\n  readContext,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n  useCallback,\n  useTransition,\n  useDeferredValue,\n  // ignore useLayout effect completely as usage of it will be caught\n  // in a subsequent render pass\n  useLayoutEffect: noop,\n  // useImperativeHandle is not run in the server environment\n  useImperativeHandle: noop,\n  // Effects are not run in the server environment.\n  useEffect: noop,\n  // Debugging effect\n  useDebugValue: noop\n}\n","// @flow\n\nimport { createElement, type Node } from 'react'\nimport type { LazyComponent, DefaultProps, LazyFrame, Frame } from '../types'\nimport { getChildrenArray } from '../element'\n\nimport {\n  setCurrentIdentity,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  getCurrentContextMap\n} from '../internals'\n\nconst resolve = (type: LazyComponent): Promise<void> => {\n  type._status = 0 /* PENDING */\n\n  return type\n    ._ctor()\n    .then(Component => {\n      if (typeof Component === 'function') {\n        type._result = Component\n        type._status = 1 /* SUCCESSFUL */\n      } else if (\n        Component !== null &&\n        typeof Component === 'object' &&\n        typeof Component.default === 'function'\n      ) {\n        type._result = Component.default\n        type._status = 1 /* SUCCESSFUL */\n      } else {\n        type._status = 2 /* FAILED */\n      }\n    })\n    .catch(() => {\n      type._status = 2 /* FAILED */\n    })\n}\n\nconst render = (\n  type: LazyComponent,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  // Component has previously been fetched successfully,\n  // so create the element with passed props and return it\n  if (type._status === 1) {\n    return createElement(type._result, props)\n  }\n\n  return null\n}\n\nexport const mount = (\n  type: LazyComponent,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  // If the component has not been fetched yet, suspend this component\n  if (type._status !== 2 && type._status !== 1) {\n    queue.push({\n      contextMap: getCurrentContextMap(),\n      contextStore: getCurrentContextStore(),\n      kind: 'frame.lazy',\n      thenable: resolve(type),\n      props,\n      type\n    })\n\n    return null\n  }\n\n  return render(type, props, queue)\n}\n\nexport const update = (queue: Frame[], frame: LazyFrame): Node => {\n  setCurrentIdentity(null)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  return render(frame.type, frame.props, queue)\n}\n","// @flow\n\nimport type { Node, ComponentType } from 'react'\nimport { computeProps } from '../element'\n\nimport type {\n  Visitor,\n  Hook,\n  Frame,\n  HooksFrame,\n  DefaultProps,\n  ComponentStatics,\n  UserElement\n} from '../types'\n\nimport {\n  type Identity,\n  maskContext,\n  makeIdentity,\n  setCurrentIdentity,\n  getCurrentIdentity,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  renderWithHooks,\n  setFirstHook,\n  getFirstHook\n} from '../internals'\n\nconst makeFrame = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  thenable: Promise<any>\n) => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  id: getCurrentIdentity(),\n  hook: getFirstHook(),\n  kind: 'frame.hooks',\n  thenable,\n  props,\n  type\n})\n\nconst render = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  try {\n    return renderWithHooks(\n      type,\n      computeProps(props, type.defaultProps),\n      maskContext(type)\n    )\n  } catch (error) {\n    if (typeof error.then !== 'function') {\n      throw error\n    }\n\n    queue.push(makeFrame(type, props, error))\n    return null\n  }\n}\n\n/** Mount a function component */\nexport const mount = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n): Node => {\n  setFirstHook(null)\n  setCurrentIdentity(makeIdentity())\n\n  const promise = visitor(element)\n  if (promise) {\n    queue.push(makeFrame(type, props, promise))\n    return null\n  }\n\n  return render(type, props, queue)\n}\n\n/** Update a previously suspended function component */\nexport const update = (queue: Frame[], frame: HooksFrame) => {\n  setFirstHook(frame.hook)\n  setCurrentIdentity(frame.id)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  return render(frame.type, frame.props, queue)\n}\n","// @flow\n\nimport type { Node, ComponentType } from 'react'\nimport { computeProps } from '../element'\n\nimport type {\n  Visitor,\n  Frame,\n  ClassFrame,\n  DefaultProps,\n  ComponentStatics,\n  UserElement\n} from '../types'\n\nimport {\n  maskContext,\n  assignContextMap,\n  setCurrentIdentity,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  setCurrentContextStore,\n  getCurrentContextStore\n} from '../internals'\n\nconst createUpdater = () => {\n  const queue = []\n\n  return {\n    queue,\n    isMounted: () => false,\n    enqueueForceUpdate: () => null,\n    enqueueReplaceState: (instance, completeState) => {\n      if (instance._isMounted) {\n        queue.length = 0\n        queue.push(completeState)\n      }\n    },\n    enqueueSetState: (instance, currentPartialState) => {\n      if (instance._isMounted) {\n        queue.push(currentPartialState)\n      }\n    }\n  }\n}\n\nconst flushEnqueuedState = (instance: any) => {\n  const queue = (instance.updater.queue: any[])\n\n  if (queue.length > 0) {\n    let nextState = Object.assign({}, instance.state)\n\n    for (let i = 0, l = queue.length; i < l; i++) {\n      const partial = queue[i]\n      const partialState =\n        typeof partial === 'function'\n          ? partial.call(instance, nextState, instance.props, instance.context)\n          : partial\n      if (partialState !== null) {\n        Object.assign(nextState, partialState)\n      }\n    }\n\n    instance.state = nextState\n    queue.length = 0\n  }\n}\n\nconst createInstance = (type: any, props: DefaultProps) => {\n  const updater = createUpdater()\n  const computedProps = computeProps(props, type.defaultProps)\n  const context = maskContext(type)\n  const instance = new type(computedProps, context, updater)\n\n  instance.props = computedProps\n  instance.context = context\n  instance.updater = updater\n  instance._isMounted = true\n\n  if (instance.state === undefined) {\n    instance.state = null\n  }\n\n  if (typeof type.getDerivedStateFromProps === 'function') {\n    const { getDerivedStateFromProps } = type\n    const state = getDerivedStateFromProps(instance.props, instance.state)\n    if (state !== null && state !== undefined) {\n      instance.state = Object.assign({}, instance.state, state)\n    }\n  } else if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount()\n  } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount()\n  }\n\n  return instance\n}\n\nconst makeFrame = (type: any, instance: any, thenable: Promise<any>) => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  thenable,\n  kind: 'frame.class',\n  instance,\n  type\n})\n\nconst render = (type: any, instance: any, queue: Frame[]) => {\n  // Flush all queued up state changes\n  flushEnqueuedState(instance)\n  let child: Node = null\n\n  try {\n    child = instance.render()\n  } catch (error) {\n    if (typeof error.then !== 'function') {\n      throw error\n    }\n\n    queue.push(makeFrame(type, instance, error))\n    return null\n  }\n\n  if (\n    type.childContextTypes !== undefined &&\n    typeof instance.getChildContext === 'function'\n  ) {\n    const childContext = instance.getChildContext()\n    if (childContext !== null && typeof childContext === 'object') {\n      assignContextMap(childContext)\n    }\n  }\n\n  if (\n    typeof instance.getDerivedStateFromProps !== 'function' &&\n    (typeof instance.componentWillMount === 'function' ||\n      typeof instance.UNSAFE_componentWillMount === 'function') &&\n    typeof instance.componentWillUnmount === 'function'\n  ) {\n    try {\n      instance.componentWillUnmount()\n    } catch (_err) {}\n  }\n\n  instance._isMounted = false\n  return child\n}\n\n/** Mount a class component */\nexport const mount = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n) => {\n  setCurrentIdentity(null)\n\n  const instance = createInstance(type, props)\n  const promise = visitor(element, instance)\n  if (promise) {\n    queue.push(makeFrame(type, instance, promise))\n    return null\n  }\n\n  return render(type, instance, queue)\n}\n\n/** Update a previously suspended class component */\nexport const update = (queue: Frame[], frame: ClassFrame) => {\n  setCurrentIdentity(null)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  return render(frame.type, frame.instance, queue)\n}\n","// @flow\n\nimport { type Node, type ComponentType, createElement } from 'react'\n\nimport {\n  typeOf,\n  shouldConstruct,\n  getChildrenArray,\n  computeProps\n} from './element'\n\nimport {\n  mountFunctionComponent,\n  updateFunctionComponent,\n  mountClassComponent,\n  updateClassComponent,\n  mountLazyComponent,\n  updateLazyComponent\n} from './render'\n\nimport type {\n  Visitor,\n  YieldFrame,\n  Frame,\n  ContextMap,\n  ContextEntry,\n  DefaultProps,\n  ComponentStatics,\n  LazyElement,\n  AbstractElement,\n  ConsumerElement,\n  ProviderElement,\n  FragmentElement,\n  SuspenseElement,\n  ForwardRefElement,\n  MemoElement,\n  UserElement,\n  DOMElement\n} from './types'\n\nimport {\n  getCurrentContextMap,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  setCurrentContextStore,\n  flushPrevContextMap,\n  flushPrevContextStore,\n  restoreContextMap,\n  restoreContextStore,\n  readContextValue,\n  setContextValue,\n  setCurrentIdentity\n} from './internals'\n\nimport {\n  REACT_ELEMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_CONCURRENT_MODE_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE\n} from './symbols'\n\n// In the presence of setImmediate, i.e. on Node, we'll enable the\n// yielding behavior that gives the event loop a chance to continue\n// running when the prepasses would otherwise take too long\nexport const SHOULD_YIELD = typeof setImmediate === 'function';\n\n// Time in ms after which the otherwise synchronous visitor yields so that\n// the event loop is not interrupted for too long\nconst YIELD_AFTER_MS = process.env.NODE_ENV !== 'production' ? 20 : 5\n\nconst render = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n) => {\n  return shouldConstruct(type)\n    ? mountClassComponent(type, props, queue, visitor, element)\n    : mountFunctionComponent(type, props, queue, visitor, element)\n}\n\nexport const visitElement = (\n  element: AbstractElement,\n  queue: Frame[],\n  visitor: Visitor\n): AbstractElement[] => {\n  switch (typeOf(element)) {\n    case REACT_SUSPENSE_TYPE:\n    case REACT_STRICT_MODE_TYPE:\n    case REACT_CONCURRENT_MODE_TYPE:\n    case REACT_PROFILER_TYPE:\n    case REACT_FRAGMENT_TYPE: {\n      // These element types are simply traversed over but otherwise ignored\n      const fragmentElement = ((element: any):\n        | FragmentElement\n        | SuspenseElement)\n      return getChildrenArray(fragmentElement.props.children)\n    }\n\n    case REACT_PROVIDER_TYPE: {\n      const providerElement = ((element: any): ProviderElement)\n      // Add provider's value prop to context\n      const { value, children } = providerElement.props\n      setContextValue(providerElement.type._context, value)\n\n      return getChildrenArray(children)\n    }\n\n    case REACT_CONTEXT_TYPE: {\n      const consumerElement = ((element: any): ConsumerElement)\n      const { children } = consumerElement.props\n\n      // Read from context and call children, if it's been passed\n      if (typeof children === 'function') {\n        const type = (consumerElement.type: any)\n        const context = typeof type._context === 'object' ? type._context : type\n        const value = readContextValue(context)\n        return getChildrenArray(children(value))\n      } else {\n        return []\n      }\n    }\n\n    case REACT_LAZY_TYPE: {\n      const lazyElement = ((element: any): LazyElement)\n      const type = lazyElement.type\n      const child = mountLazyComponent(type, lazyElement.props, queue)\n      return getChildrenArray(child)\n    }\n\n    case REACT_MEMO_TYPE: {\n      const memoElement = ((element: any): MemoElement)\n      const { type } = memoElement.type\n      const child = createElement((type: any), memoElement.props)\n      return getChildrenArray(child)\n    }\n\n    case REACT_FORWARD_REF_TYPE: {\n      const refElement = ((element: any): ForwardRefElement)\n      const { render: type, defaultProps } = refElement.type\n      const props = computeProps(refElement.props, defaultProps)\n      const child = createElement((type: any), props)\n      return getChildrenArray(child)\n    }\n\n    case REACT_ELEMENT_TYPE: {\n      const el = ((element: any): UserElement | DOMElement)\n      if (typeof el.type === 'string') {\n        // String elements can be skipped, so we just return children\n        return getChildrenArray(el.props.children)\n      } else {\n        const userElement = ((element: any): UserElement)\n        const { type, props } = userElement\n        const child = render(type, props, queue, visitor, userElement)\n        return getChildrenArray(child)\n      }\n    }\n\n    case REACT_PORTAL_TYPE:\n    // Portals are unsupported during SSR since they're DOM-only\n    default:\n      return []\n  }\n}\n\nconst visitLoop = (\n  traversalChildren: AbstractElement[][],\n  traversalMap: Array<void | ContextMap>,\n  traversalStore: Array<void | ContextEntry>,\n  queue: Frame[],\n  visitor: Visitor\n): boolean => {\n  const start = Date.now()\n\n  while (traversalChildren.length > 0) {\n    const element = traversalChildren[traversalChildren.length - 1].shift()\n    if (element !== undefined) {\n      const children = visitElement(element, queue, visitor)\n      traversalChildren.push(children)\n      traversalMap.push(flushPrevContextMap())\n      traversalStore.push(flushPrevContextStore())\n    } else {\n      traversalChildren.pop()\n      restoreContextMap(traversalMap.pop())\n      restoreContextStore(traversalStore.pop())\n    }\n\n    if (SHOULD_YIELD && (Date.now() - start > YIELD_AFTER_MS)) {\n      return true\n    }\n  }\n\n  return false\n}\n\nconst makeYieldFrame = (\n  traversalChildren: AbstractElement[][],\n  traversalMap: Array<void | ContextMap>,\n  traversalStore: Array<void | ContextEntry>\n): Frame => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  thenable: Promise.resolve(),\n  kind: 'frame.yield',\n  children: traversalChildren,\n  map: traversalMap,\n  store: traversalStore\n})\n\nexport const visitChildren = (\n  init: AbstractElement[],\n  queue: Frame[],\n  visitor: Visitor\n) => {\n  const traversalChildren: AbstractElement[][] = [init]\n  const traversalMap: Array<void | ContextMap> = [flushPrevContextMap()]\n  const traversalStore: Array<void | ContextEntry> = [flushPrevContextStore()]\n\n  const hasYielded = visitLoop(\n    traversalChildren,\n    traversalMap,\n    traversalStore,\n    queue,\n    visitor\n  )\n\n  if (hasYielded) {\n    queue.unshift(\n      makeYieldFrame(traversalChildren, traversalMap, traversalStore)\n    )\n  }\n}\n\nexport const resumeVisitChildren = (\n  frame: YieldFrame,\n  queue: Frame[],\n  visitor: Visitor\n) => {\n  setCurrentIdentity(null)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n\n  const hasYielded = visitLoop(\n    frame.children,\n    frame.map,\n    frame.store,\n    queue,\n    visitor\n  )\n\n  if (hasYielded) {\n    queue.unshift(makeYieldFrame(frame.children, frame.map, frame.store))\n  }\n}\n\nexport const update = (frame: Frame, queue: Frame[]): Node => {\n  switch (frame.kind) {\n    case 'frame.class':\n      return updateClassComponent(queue, frame)\n    case 'frame.hooks':\n      return updateFunctionComponent(queue, frame)\n    case 'frame.lazy':\n      return updateLazyComponent(queue, frame)\n    default:\n      return []\n  }\n}\n","// @flow\n\nimport React, { type Node, type Element } from 'react'\nimport type { Visitor, YieldFrame, Frame, AbstractElement } from './types'\nimport { visitChildren, resumeVisitChildren, update, SHOULD_YIELD } from './visitor'\nimport { getChildrenArray } from './element'\n\nimport {\n  setCurrentContextStore,\n  setCurrentContextMap,\n  Dispatcher\n} from './internals'\n\nconst {\n  ReactCurrentDispatcher\n} = (React: any).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n\n/** wrapWithDispatcher accepts a function and wraps it\n  in one that sets up our ReactCurrentDispatcher and\n  resets it afterwards */\nfunction wrapWithDispatcher<T: Function>(exec: T): T {\n  // $FlowFixMe\n  return (...args) => {\n    const prevDispatcher = ReactCurrentDispatcher.current\n\n    try {\n      // The \"Dispatcher\" is what handles hook calls and\n      // a React internal that needs to be set to our dispatcher\n      ReactCurrentDispatcher.current = Dispatcher\n      return exec(...args)\n    } finally {\n      // We're resetting the dispatcher after we're done\n      ReactCurrentDispatcher.current = prevDispatcher\n    }\n  }\n}\n\nconst resumeWithDispatcher = wrapWithDispatcher(resumeVisitChildren)\nconst visitWithDispatcher = wrapWithDispatcher(visitChildren)\nconst updateWithDispatcher = wrapWithDispatcher(update)\n\n/** visitChildren walks all elements (depth-first) and while it walks the\n    element tree some components will suspend and put a `Frame` onto\n    the queue. Hence we recursively look at suspended components in\n    this queue, wait for their promises to resolve, and continue\n    calling visitChildren on their children. */\nconst updateWithFrame = (\n  frame: Frame,\n  queue: Frame[],\n  visitor: Visitor\n): Promise<void> => {\n  if (frame.kind === 'frame.yield') {\n    return new Promise((resolve, reject) => {\n      const resume = () => {\n        try {\n          resumeWithDispatcher(frame, queue, visitor)\n          resolve()\n        } catch (err) {\n          reject(err)\n        }\n      }\n      if (SHOULD_YIELD) {\n        setImmediate(resume)\n      } else {\n        resume()\n      }\n    })\n  }\n\n  return frame.thenable.then(() => {\n    // Update the component after we've suspended to rerender it,\n    // at which point we'll actually get its children\n    const children = updateWithDispatcher(frame, queue)\n    // Now continue walking the previously suspended component's\n    // children (which might also suspend)\n    visitWithDispatcher(getChildrenArray(children), queue, visitor)\n  })\n}\n\nconst flushFrames = (queue: Frame[], visitor: Visitor): Promise<void> => {\n  const frame = queue.shift()\n  return frame\n    ? updateWithFrame(frame, queue, visitor).then(() =>\n        flushFrames(queue, visitor)\n      )\n    : Promise.resolve()\n}\n\nconst defaultVisitor = () => undefined\n\nconst renderPrepass = (element: Node, visitor?: Visitor): Promise<void> => {\n  const queue: Frame[] = []\n  const fn = visitor !== undefined ? visitor : defaultVisitor\n\n  // Context state is kept globally and is modified in-place.\n  // Before we start walking the element tree we need to reset\n  // its current state\n  setCurrentContextMap({})\n  setCurrentContextStore(new Map())\n\n  try {\n    visitWithDispatcher(getChildrenArray(element), queue, fn)\n  } catch (error) {\n    return Promise.reject(error)\n  }\n\n  return flushFrames(queue, fn)\n}\n\nexport default renderPrepass\n"],"names":["const","REACT_ELEMENT_TYPE","is","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_CONCURRENT_MODE_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","toArray","Children","isAbstractElement","node","getChildrenArray","computeProps","props","defaultProps","Object","currentContextStore","Map","currentContextMap","prevContextMap","undefined","prevContextEntry","getCurrentContextMap","getCurrentContextStore","flushPrevContextMap","prev","flushPrevContextStore","restoreContextMap","restoreContextStore","setCurrentContextMap","map","setCurrentContextStore","store","readContextValue","context","value","emptyContext","maskContext","type","contextType","contextTypes","name","maskedContext","currentIdentity","setCurrentIdentity","id","getCurrentIdentity","firstWorkInProgressHook","workInProgressHook","didScheduleRenderPhaseUpdate","renderPhaseUpdates","numberOfReRenders","setFirstHook","hook","createWorkInProgressHook","memoizedState","queue","next","basicStateReducer","state","action","useReducer","reducer","initialArg","init","initialState","last","dispatch","dispatchAction","firstRenderPhaseUpdate","newState","update","useMemo","nextCreate","deps","prevState","nextDeps","prevDeps","let","i","areHookInputsEqual","nextValue","componentIdentity","lastRenderPhaseUpdate","noop","callback","Dispatcher","readContext","_","useContext","useRef","initialValue","previousRef","ref","current","useState","useCallback","useTransition","useDeferredValue","input","useLayoutEffect","useImperativeHandle","useEffect","useDebugValue","resolve","Component","render","createElement","makeFrame","thenable","contextMap","contextStore","kind","renderWithHooks","refOrContext","children","error","instance","nextState","l","partial","partialState","flushEnqueuedState","child","childContext","assignContextMap","_err","SHOULD_YIELD","visitElement","element","visitor","x","typeOf","setContextValue","mountLazyComponent","Comp","promise","updater","isMounted","enqueueForceUpdate","enqueueReplaceState","completeState","enqueueSetState","currentPartialState","createUpdater","computedProps","createInstance","mountClassComponent","mountFunctionComponent","visitLoop","traversalChildren","traversalMap","traversalStore","start","Date","makeYieldFrame","Promise","React","exec","ReactCurrentDispatcher","args","prevDispatcher","resumeWithDispatcher","wrapWithDispatcher","frame","visitWithDispatcher","updateWithDispatcher","flushFrames","reject","resume","err","setImmediate","updateWithFrame","defaultVisitor","fn"],"mappings":"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"}