{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _toConsumableArray from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                    fragment __ on Post {\\n                      points\\n                      voteStatus\\n                    }\\n                  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                  fragment _ on Post {\\n                    id\\n                    points\\n                    voteStatus\\n                  }\\n                \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport { dedupExchange, fetchExchange, stringifyVariables } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport { isServer } from './isServer'; // this is a global handler for errors\n\nvar errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error !== null && error !== void 0 && error.message.includes('not authenticated')) {\n        Router.replace('/login'); // this replace the current route\n      }\n    }));\n  };\n};\n\nexport var cursorPagination = function cursorPagination() {\n  return function (_parent, fieldArgs, cache, info) {\n    var entityKey = info.parentKey,\n        fieldName = info.fieldName; // entity key - Query, fieldName is posts. info- info about the query in resolver\n\n    var allFields = cache.inspectFields(entityKey); //all the queires that run and are cached\n\n    var fieldInfos = allFields.filter(function (info) {\n      return info.fieldName === fieldName;\n    }); // we are finding the query cache that matches with the query in resolver\n\n    var size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    var fieldKey = \"\".concat(fieldName, \"(\").concat(stringifyVariables(fieldArgs), \")\"); // stringifyVariables- change the args to json like stuff\n\n    var isItInTheCache = cache.resolve(entityKey, fieldKey); // console.log(isItInTheCache)\n\n    info.partial = !isItInTheCache; //here if there is nothing in cache then do call the query with new paramater\n    //partial: to indicate that some data is uncached and missing.\n\n    var hasMore = true;\n    var results = [];\n    fieldInfos.forEach(function (fi) {\n      var key = cache.resolve(entityKey, fi.fieldKey); // to get all queries from cache\n\n      var _hasMore = cache.resolve(key, 'hasMore');\n\n      var data = cache.resolve(key, 'posts');\n\n      if (!_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push.apply(results, _toConsumableArray(data)); //this destructure the string array\n    });\n    return {\n      __typename: 'PaginatedPosts',\n      // type returned\n      hasMore: hasMore,\n      posts: results\n    }; // this pagination stores each load more in array\n  };\n};\nexport var createUrqlClient = function createUrqlClient(ssrExchange, ctx) {\n  var cookie = '';\n\n  if (isServer()) {\n    var _ctx$req, _ctx$req$headers;\n\n    cookie = ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : (_ctx$req$headers = _ctx$req.headers) === null || _ctx$req$headers === void 0 ? void 0 : _ctx$req$headers.cookie; // if in next js server\n  }\n\n  return {\n    url: 'http://localhost:4000/graphql',\n    fetchOptions: {\n      credentials: 'include',\n      // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n      //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n      headers: cookie ? {\n        cookie: cookie // send the cookie to graphQl api if server side render\n\n      } : undefined\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      keys: {\n        PaginatedPosts: function PaginatedPosts() {\n          return null;\n        } // ERROR:You have to request `id` or `_id` fields for all selection sets or create a custom `keys` config for `PaginatedPosts`.\n        // Entities without keys will be embedded directly on the parent entity.\n        //If this is intentional, create a `keys` config for `PaginatedPosts` that always returns null.\n\n      },\n      resolvers: {\n        // this runs every time the query is run.\n        Query: {\n          posts: cursorPagination()\n        }\n      },\n      updates: {\n        Mutation: {\n          vote: function vote(_result, args, cache, info) {\n            // we are updating points in post in ui\n            var _ref3 = args,\n                postid = _ref3.postid,\n                value = _ref3.value;\n            var data = cache.readFragment(gql(_templateObject()), {\n              id: postid\n            });\n\n            if (data) {\n              // don't update the cache if if the same button isclicked\n              if (data.voteStatus === value) {\n                console.log('def');\n                return;\n              }\n\n              var newPoints = data.points + (!data.voteStatus ? 1 : 2) * value; // the default of vote status is null if null use 1 else 2\n\n              cache.writeFragment(gql(_templateObject2()), {\n                id: postid,\n                points: newPoints,\n                voteStatus: value\n              });\n            }\n          },\n          createPost: function createPost(_result, args, cache, info) {\n            // ALTERNATIVE FOR CACHE EXCHANGE BELOW\n            var allFields = cache.inspectFields('Query');\n            var fieldInfos = allFields.filter(function (info) {\n              return info.fieldName === 'posts';\n            });\n            fieldInfos.forEach(function (fi) {\n              cache.invalidate('Query', 'posts', fi.arguments || {});\n            }); // we are invalidating all the posts in cache as if you have clicked load more 3 times then created a post, you will be redirected to the cached pafge and not the reloaded page. so old post show up at top and updated post at the bottom\n          },\n          login: function login(_result, args, cache, info) {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, // the query to be updated\n            _result, function (result, query) {\n              // we are just defining the function here\n              //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          logout: function logout(_result, args, cache, info) {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, // the query to be updated\n            _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, // the query to be updated\n            _result, function (result, query) {\n              if (result.register.errors) {\n                return query; // if not register then return the current me query\n              } else {\n                return {\n                  me: result.register.user // user and errors are in mutation check it.\n                  // the user field in mutation is the same as me query\n\n                };\n              }\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, // server side render\n    fetchExchange]\n  };\n}; ///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain\n//resolvers\n// A nested mapping of resolvers, which are used to override the record or entity that Graphcache resolves for a given field for a type.\n// updates\n// A nested mapping of updater functions for mutation and subscription fields, which may be used to add side-effects that update other parts of the cache when the given subscription or mutation field is written to the cache.","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","gql","Router","dedupExchange","fetchExchange","stringifyVariables","pipe","tap","MeDocument","betterUpdateQuery","isServer","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","entityKey","parentKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","isItInTheCache","resolve","partial","hasMore","results","forEach","fi","key","_hasMore","data","push","__typename","posts","createUrqlClient","ssrExchange","ctx","cookie","req","headers","url","fetchOptions","credentials","exchanges","keys","PaginatedPosts","resolvers","Query","updates","Mutation","vote","_result","args","postid","value","readFragment","id","voteStatus","console","log","newPoints","points","writeFragment","createPost","invalidate","arguments","login","query","result","errors","me","user","logout","register"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,aAAT,QAAwC,2BAAxC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SACEC,aADF,EAGEC,aAHF,EAIEC,kBAJF,QAKO,MALP;AAMA,SAASC,IAAT,EAAeC,GAAf,QAA0B,OAA1B;AACA,SAGEC,UAHF,QAOO,sBAPP;AAQA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,QAAT,QAAyB,YAAzB,C,CAEA;;AACA,IAAMC,aAAuB,GAAG,SAA1BA,aAA0B;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,SAAiB,UAACC,IAAD,EAAU;AACzD,WAAOP,IAAI,CACTM,OAAO,CAACC,IAAD,CADE,EAETN,GAAG,CAAC,iBAAe;AAAA,UAAZO,KAAY,SAAZA,KAAY;;AACjB,UAAIA,KAAJ,aAAIA,KAAJ,eAAIA,KAAK,CAAEC,OAAP,CAAeC,QAAf,CAAwB,mBAAxB,CAAJ,EAAkD;AAChDd,QAAAA,MAAM,CAACe,OAAP,CAAe,QAAf,EADgD,CACvB;AAC1B;AACF,KAJE,CAFM,CAAX;AAQD,GAT+B;AAAA,CAAhC;;AAWA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAgB;AAC9C,SAAO,UAACC,OAAD,EAAUC,SAAV,EAAqBC,KAArB,EAA4BC,IAA5B,EAAqC;AAAA,QACvBC,SADuB,GACED,IADF,CAClCE,SADkC;AAAA,QACZC,SADY,GACEH,IADF,CACZG,SADY,EAE1C;;AAEA,QAAMC,SAAS,GAAGL,KAAK,CAACM,aAAN,CAAoBJ,SAApB,CAAlB,CAJ0C,CAIO;;AAEjD,QAAMK,UAAU,GAAGF,SAAS,CAACG,MAAV,CAAiB,UAACP,IAAD;AAAA,aAAUA,IAAI,CAACG,SAAL,KAAmBA,SAA7B;AAAA,KAAjB,CAAnB,CAN0C,CAMkC;;AAE5E,QAAMK,IAAI,GAAGF,UAAU,CAACG,MAAxB;;AACA,QAAID,IAAI,KAAK,CAAb,EAAgB;AACd,aAAOE,SAAP;AACD;;AAED,QAAMC,QAAQ,aAAMR,SAAN,cAAmBpB,kBAAkB,CAACe,SAAD,CAArC,MAAd,CAb0C,CAc1C;;AAEA,QAAMc,cAAc,GAAGb,KAAK,CAACc,OAAN,CAAcZ,SAAd,EAAyBU,QAAzB,CAAvB,CAhB0C,CAiB1C;;AACAX,IAAAA,IAAI,CAACc,OAAL,GAAe,CAACF,cAAhB,CAlB0C,CAmB1C;AACA;;AAEA,QAAIG,OAAO,GAAG,IAAd;AACA,QAAMC,OAAiB,GAAG,EAA1B;AACAV,IAAAA,UAAU,CAACW,OAAX,CAAmB,UAACC,EAAD,EAAQ;AACzB,UAAMC,GAAG,GAAGpB,KAAK,CAACc,OAAN,CAAcZ,SAAd,EAAyBiB,EAAE,CAACP,QAA5B,CAAZ,CADyB,CACmC;;AAC5D,UAAMS,QAAQ,GAAGrB,KAAK,CAACc,OAAN,CAAcM,GAAd,EAAmB,SAAnB,CAAjB;;AACA,UAAME,IAAI,GAAGtB,KAAK,CAACc,OAAN,CAAcM,GAAd,EAAmB,OAAnB,CAAb;;AACA,UAAI,CAACC,QAAL,EAAe;AACbL,QAAAA,OAAO,GAAGK,QAAV;AACD;;AACDJ,MAAAA,OAAO,CAACM,IAAR,OAAAN,OAAO,qBAASK,IAAT,EAAP,CAPyB,CAOH;AACvB,KARD;AAUA,WAAO;AACLE,MAAAA,UAAU,EAAE,gBADP;AACyB;AAC9BR,MAAAA,OAAO,EAAPA,OAFK;AAGLS,MAAAA,KAAK,EAAER;AAHF,KAAP,CAlC0C,CAuC1C;AACD,GAxCD;AAyCD,CA1CM;AA2CP,OAAO,IAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,WAAD,EAAmBC,GAAnB,EAAgC;AAC9D,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAIxC,QAAQ,EAAZ,EAAgB;AAAA;;AACdwC,IAAAA,MAAM,GAAGD,GAAH,aAAGA,GAAH,mCAAGA,GAAG,CAAEE,GAAR,iEAAG,SAAUC,OAAb,qDAAG,iBAAmBF,MAA5B,CADc,CAEd;AACD;;AAED,SAAO;AACLG,IAAAA,GAAG,EAAE,+BADA;AAELC,IAAAA,YAAY,EAAE;AACZC,MAAAA,WAAW,EAAE,SADD;AACqB;AACjC;AAEAH,MAAAA,OAAO,EAAEF,MAAM,GACX;AACEA,QAAAA,MAAM,EAANA,MADF,CAEE;;AAFF,OADW,GAKXlB;AATQ,KAFT;AAaLwB,IAAAA,SAAS,EAAE,CACTrD,aADS,EAETH,aAAa,CAAC;AACZyD,MAAAA,IAAI,EAAE;AACJC,QAAAA,cAAc,EAAE;AAAA,iBAAM,IAAN;AAAA,SADZ,CAEJ;AACA;AACA;;AAJI,OADM;AAOZC,MAAAA,SAAS,EAAE;AACT;AACAC,QAAAA,KAAK,EAAE;AACLd,UAAAA,KAAK,EAAE5B,gBAAgB;AADlB;AAFE,OAPC;AAaZ2C,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,IAAI,EAAE,cAACC,OAAD,EAAUC,IAAV,EAAgB5C,KAAhB,EAAuBC,IAAvB,EAAgC;AACpC;AADoC,wBAEV2C,IAFU;AAAA,gBAE5BC,MAF4B,SAE5BA,MAF4B;AAAA,gBAEpBC,KAFoB,SAEpBA,KAFoB;AAGpC,gBAAMxB,IAAI,GAAGtB,KAAK,CAAC+C,YAAN,CACXnE,GADW,qBAQX;AAAEoE,cAAAA,EAAE,EAAEH;AAAN,aARW,CAAb;;AAWA,gBAAIvB,IAAJ,EAAU;AACR;AACA,kBAAIA,IAAI,CAAC2B,UAAL,KAAoBH,KAAxB,EAA+B;AAC7BI,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA;AACD;;AACD,kBAAMC,SAAS,GACZ9B,IAAI,CAAC+B,MAAN,GAA0B,CAAC,CAAC/B,IAAI,CAAC2B,UAAN,GAAmB,CAAnB,GAAuB,CAAxB,IAA6BH,KADzD,CANQ,CAOuD;;AAC/D9C,cAAAA,KAAK,CAACsD,aAAN,CACE1E,GADF,sBAOE;AAAEoE,gBAAAA,EAAE,EAAEH,MAAN;AAAcQ,gBAAAA,MAAM,EAAED,SAAtB;AAAiCH,gBAAAA,UAAU,EAAEH;AAA7C,eAPF;AASD;AACF,WAjCO;AAkCRS,UAAAA,UAAU,EAAE,oBAACZ,OAAD,EAAUC,IAAV,EAAgB5C,KAAhB,EAAuBC,IAAvB,EAAgC;AAC1C;AACA,gBAAMI,SAAS,GAAGL,KAAK,CAACM,aAAN,CAAoB,OAApB,CAAlB;AACA,gBAAMC,UAAU,GAAGF,SAAS,CAACG,MAAV,CACjB,UAACP,IAAD;AAAA,qBAAUA,IAAI,CAACG,SAAL,KAAmB,OAA7B;AAAA,aADiB,CAAnB;AAGAG,YAAAA,UAAU,CAACW,OAAX,CAAmB,UAACC,EAAD,EAAQ;AACzBnB,cAAAA,KAAK,CAACwD,UAAN,CAAiB,OAAjB,EAA0B,OAA1B,EAAmCrC,EAAE,CAACsC,SAAH,IAAgB,EAAnD;AACD,aAFD,EAN0C,CAS1C;AACD,WA5CO;AA6CRC,UAAAA,KAAK,EAAE,eAACf,OAAD,EAAUC,IAAV,EAAgB5C,KAAhB,EAAuBC,IAAvB,EAAgC;AACrC;AACAb,YAAAA,iBAAiB,CACfY,KADe,EAEf;AAAE2D,cAAAA,KAAK,EAAExE;AAAT,aAFe,EAEQ;AACvBwD,YAAAA,OAHe,EAIf,UAACiB,MAAD,EAASD,KAAT,EAAmB;AACjB;AACA;AACA,kBAAIC,MAAM,CAACF,KAAP,CAAaG,MAAjB,EAAyB;AACvB,uBAAOF,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLG,kBAAAA,EAAE,EAAEF,MAAM,CAACF,KAAP,CAAaK;AADZ,iBAAP;AAGD;AACF,aAdc,CAAjB;AAgBD,WA/DO;AAgERC,UAAAA,MAAM,EAAE,gBAACrB,OAAD,EAAUC,IAAV,EAAgB5C,KAAhB,EAAuBC,IAAvB,EAAgC;AACtC;AACAb,YAAAA,iBAAiB,CACfY,KADe,EAEf;AAAE2D,cAAAA,KAAK,EAAExE;AAAT,aAFe,EAEQ;AACvBwD,YAAAA,OAHe,EAIf,YAAM;AACJ,qBAAO;AACLmB,gBAAAA,EAAE,EAAE;AADC,eAAP;AAGD,aARc,CAAjB;AAUD,WA5EO;AA6ERG,UAAAA,QAAQ,EAAE,kBAACtB,OAAD,EAAUC,IAAV,EAAgB5C,KAAhB,EAAuBC,IAAvB,EAAgC;AACxCb,YAAAA,iBAAiB,CACfY,KADe,EAEf;AAAE2D,cAAAA,KAAK,EAAExE;AAAT,aAFe,EAEQ;AACvBwD,YAAAA,OAHe,EAIf,UAACiB,MAAD,EAASD,KAAT,EAAmB;AACjB,kBAAIC,MAAM,CAACK,QAAP,CAAgBJ,MAApB,EAA4B;AAC1B,uBAAOF,KAAP,CAD0B,CACb;AACd,eAFD,MAEO;AACL,uBAAO;AACLG,kBAAAA,EAAE,EAAEF,MAAM,CAACK,QAAP,CAAgBF,IADf,CACqB;AAC1B;;AAFK,iBAAP;AAID;AACF,aAbc,CAAjB;AAeD;AA7FO;AADH;AAbG,KAAD,CAFJ,EAiHTzE,aAjHS,EAkHTqC,WAlHS,EAkHI;AACb5C,IAAAA,aAnHS;AAbN,GAAP;AAmID,CA1IM,C,CA4IP;AACA;AAEA;AAEA;AACA;AAEA;AACA","sourcesContent":["import { cacheExchange, Resolver } from '@urql/exchange-graphcache'\nimport gql from 'graphql-tag'\nimport Router from 'next/router'\nimport {\n  dedupExchange,\n  Exchange,\n  fetchExchange,\n  stringifyVariables,\n} from 'urql'\nimport { pipe, tap } from 'wonka'\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n  VoteMutationVariables,\n} from '../generated/graphql'\nimport { betterUpdateQuery } from './betterUpdateQuery'\nimport { isServer } from './isServer'\n\n// this is a global handler for errors\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/login') // this replace the current route\n      }\n    })\n  )\n}\n\nexport const cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info\n    // entity key - Query, fieldName is posts. info- info about the query in resolver\n\n    const allFields = cache.inspectFields(entityKey) //all the queires that run and are cached\n\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName) // we are finding the query cache that matches with the query in resolver\n\n    const size = fieldInfos.length\n    if (size === 0) {\n      return undefined\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`\n    // stringifyVariables- change the args to json like stuff\n\n    const isItInTheCache = cache.resolve(entityKey, fieldKey)\n    // console.log(isItInTheCache)\n    info.partial = !isItInTheCache\n    //here if there is nothing in cache then do call the query with new paramater\n    //partial: to indicate that some data is uncached and missing.\n\n    let hasMore = true\n    const results: string[] = []\n    fieldInfos.forEach((fi) => {\n      const key = cache.resolve(entityKey, fi.fieldKey) as string // to get all queries from cache\n      const _hasMore = cache.resolve(key, 'hasMore')\n      const data = cache.resolve(key, 'posts') as string[]\n      if (!_hasMore) {\n        hasMore = _hasMore as boolean\n      }\n      results.push(...data) //this destructure the string array\n    })\n\n    return {\n      __typename: 'PaginatedPosts', // type returned\n      hasMore,\n      posts: results,\n    }\n    // this pagination stores each load more in array\n  }\n}\nexport const createUrqlClient = (ssrExchange: any, ctx: any) => {\n  let cookie = ''\n  if (isServer()) {\n    cookie = ctx?.req?.headers?.cookie\n    // if in next js server\n  }\n\n  return {\n    url: 'http://localhost:4000/graphql',\n    fetchOptions: {\n      credentials: 'include' as const, // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n      //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n\n      headers: cookie\n        ? {\n            cookie,\n            // send the cookie to graphQl api if server side render\n          }\n        : undefined,\n    },\n    exchanges: [\n      dedupExchange,\n      cacheExchange({\n        keys: {\n          PaginatedPosts: () => null,\n          // ERROR:You have to request `id` or `_id` fields for all selection sets or create a custom `keys` config for `PaginatedPosts`.\n          // Entities without keys will be embedded directly on the parent entity.\n          //If this is intentional, create a `keys` config for `PaginatedPosts` that always returns null.\n        },\n        resolvers: {\n          // this runs every time the query is run.\n          Query: {\n            posts: cursorPagination(),\n          },\n        },\n        updates: {\n          Mutation: {\n            vote: (_result, args, cache, info) => {\n              // we are updating points in post in ui\n              const { postid, value } = args as VoteMutationVariables\n              const data = cache.readFragment(\n                gql`\n                  fragment _ on Post {\n                    id\n                    points\n                    voteStatus\n                  }\n                `,\n                { id: postid } as any\n              )\n\n              if (data) {\n                // don't update the cache if if the same button isclicked\n                if (data.voteStatus === value) {\n                  console.log('def')\n                  return\n                }\n                const newPoints =\n                  (data.points as number) + (!data.voteStatus ? 1 : 2) * value // the default of vote status is null if null use 1 else 2\n                cache.writeFragment(\n                  gql`\n                    fragment __ on Post {\n                      points\n                      voteStatus\n                    }\n                  `,\n                  { id: postid, points: newPoints, voteStatus: value } as any\n                )\n              }\n            },\n            createPost: (_result, args, cache, info) => {\n              // ALTERNATIVE FOR CACHE EXCHANGE BELOW\n              const allFields = cache.inspectFields('Query')\n              const fieldInfos = allFields.filter(\n                (info) => info.fieldName === 'posts'\n              )\n              fieldInfos.forEach((fi) => {\n                cache.invalidate('Query', 'posts', fi.arguments || {})\n              })\n              // we are invalidating all the posts in cache as if you have clicked load more 3 times then created a post, you will be redirected to the cached pafge and not the reloaded page. so old post show up at top and updated post at the bottom\n            },\n            login: (_result, args, cache, info) => {\n              // result is the complete data of login mutation. this is used in replacement of Query me's data\n              betterUpdateQuery<LoginMutation, MeQuery>(\n                cache,\n                { query: MeDocument }, // the query to be updated\n                _result,\n                (result, query) => {\n                  // we are just defining the function here\n                  //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n                  if (result.login.errors) {\n                    return query\n                  } else {\n                    return {\n                      me: result.login.user,\n                    }\n                  }\n                }\n              )\n            },\n            logout: (_result, args, cache, info) => {\n              // result is the complete data of login mutation. this is used in replacement of Query me's data\n              betterUpdateQuery<LogoutMutation, MeQuery>(\n                cache,\n                { query: MeDocument }, // the query to be updated\n                _result,\n                () => {\n                  return {\n                    me: null,\n                  }\n                }\n              )\n            },\n            register: (_result, args, cache, info) => {\n              betterUpdateQuery<RegisterMutation, MeQuery>(\n                cache,\n                { query: MeDocument }, // the query to be updated\n                _result,\n                (result, query) => {\n                  if (result.register.errors) {\n                    return query // if not register then return the current me query\n                  } else {\n                    return {\n                      me: result.register.user, // user and errors are in mutation check it.\n                      // the user field in mutation is the same as me query\n                    }\n                  }\n                }\n              )\n            },\n          },\n        },\n      }),\n      errorExchange,\n      ssrExchange, // server side render\n      fetchExchange,\n    ],\n  }\n}\n\n///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain\n\n//resolvers\n// A nested mapping of resolvers, which are used to override the record or entity that Graphcache resolves for a given field for a type.\n\n// updates\n// A nested mapping of updater functions for mutation and subscription fields, which may be used to add side-effects that update other parts of the cache when the given subscription or mutation field is written to the cache.\n"]},"metadata":{},"sourceType":"module"}