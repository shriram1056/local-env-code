{"ast":null,"code":"import { cacheExchange } from '@urql/exchange-graphcache';\nimport Router from 'next/router';\nimport { dedupExchange, fetchExchange, stringifyVariables } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery'; // this is a global handler for errors\n\nconst errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error !== null && error !== void 0 && error.message.includes('not authenticated')) {\n      Router.replace('/login'); // this replace the current route\n    }\n  }));\n};\n\nexport const cursorPagination = () => {\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info; // entity key - Query, fieldName is posts\n\n    const allFields = cache.inspectFields(entityKey); //cache is Queries that run and gave results\n\n    console.log('allfields:', allFields);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName); // we are finding the query cache that matches with the query in resolver\n\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isItInTheCache = cache.resolve(entityKey, fieldKey);\n    info.partial = !isItInTheCache;\n    const results = [];\n    fieldInfos.forEach(fi => {\n      const data = cache.resolve(entityKey, fi.fieldKey); // to get the data from the field key\n\n      results.push(...data); //this destructure the string array\n    });\n    return results;\n  };\n};\nexport const createUrqlClient = ssrExchange => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    resolvers: {\n      // this runs every time the query is run.\n      Query: {\n        posts: cursorPagination()\n      }\n    },\n    updates: {\n      Mutation: {\n        login: (_result, args, cache, info) => {\n          // result is the complete data of login mutation. this is used in replacement of Query me's data\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, // the query to be updated\n          _result, (result, query) => {\n            // we are just defining the function here\n            //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        logout: (_result, args, cache, info) => {\n          // result is the complete data of login mutation. this is used in replacement of Query me's data\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, // the query to be updated\n          _result, () => {\n            return {\n              me: null\n            };\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, // the query to be updated\n          _result, (result, query) => {\n            if (result.register.errors) {\n              return query; // if not register then return the current me query\n            } else {\n              return {\n                me: result.register.user // user and errors are in mutation check it.\n                // the user field in mutation is the same as me query\n\n              };\n            }\n          });\n        }\n      }\n    }\n  }), errorExchange, ssrExchange, // server side render\n  fetchExchange]\n}); ///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","Router","dedupExchange","fetchExchange","stringifyVariables","pipe","tap","MeDocument","betterUpdateQuery","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","console","log","fieldInfos","filter","size","length","undefined","fieldKey","isItInTheCache","resolve","partial","results","forEach","fi","data","push","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","resolvers","Query","posts","updates","Mutation","login","_result","args","query","result","errors","me","user","logout","register"],"mappings":"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","sourcesContent":["import { cacheExchange, Resolver } from '@urql/exchange-graphcache'\nimport Router from 'next/router'\nimport {\n  dedupExchange,\n  Exchange,\n  fetchExchange,\n  stringifyVariables,\n} from 'urql'\nimport { pipe, tap } from 'wonka'\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n} from '../generated/graphql'\nimport { betterUpdateQuery } from './betterUpdateQuery'\n\n// this is a global handler for errors\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/login') // this replace the current route\n      }\n    })\n  )\n}\n\nexport const cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info\n    // entity key - Query, fieldName is posts\n\n    const allFields = cache.inspectFields(entityKey) //cache is Queries that run and gave results\n\n    console.log('allfields:', allFields)\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName) // we are finding the query cache that matches with the query in resolver\n\n    const size = fieldInfos.length\n    if (size === 0) {\n      return undefined\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`\n    const isItInTheCache = cache.resolve(entityKey, fieldKey)\n    info.partial = !isItInTheCache\n    const results: string[] = []\n    fieldInfos.forEach((fi) => {\n      const data = cache.resolve(entityKey, fi.fieldKey) as string[] // to get the data from the field key\n\n      results.push(...data) //this destructure the string array\n    })\n\n    return results\n  }\n}\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' as const, // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      resolvers: {\n        // this runs every time the query is run.\n        Query: {\n          posts: cursorPagination(),\n        },\n      },\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              (result, query) => {\n                // we are just defining the function here\n                //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n                if (result.login.errors) {\n                  return query\n                } else {\n                  return {\n                    me: result.login.user,\n                  }\n                }\n              }\n            )\n          },\n          logout: (_result, args, cache, info) => {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              () => {\n                return {\n                  me: null,\n                }\n              }\n            )\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query // if not register then return the current me query\n                } else {\n                  return {\n                    me: result.register.user, // user and errors are in mutation check it.\n                    // the user field in mutation is the same as me query\n                  }\n                }\n              }\n            )\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange, // server side render\n    fetchExchange,\n  ],\n})\n///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain\n"]},"metadata":{},"sourceType":"module"}