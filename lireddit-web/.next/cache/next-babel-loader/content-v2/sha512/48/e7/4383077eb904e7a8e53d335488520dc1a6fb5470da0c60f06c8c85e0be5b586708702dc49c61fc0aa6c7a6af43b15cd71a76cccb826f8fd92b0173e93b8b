{"ast":null,"code":"import _toConsumableArray from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport Router from 'next/router';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery'; // this is a global handler for errors\n\nvar errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error !== null && error !== void 0 && error.message.includes('not authenticated')) {\n        Router.replace('/login'); // this replace the current route\n      }\n    }));\n  };\n};\n\nexport var cursorPagination = function cursorPagination() {\n  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref3$offsetArgument = _ref3.offsetArgument,\n      offsetArgument = _ref3$offsetArgument === void 0 ? 'skip' : _ref3$offsetArgument,\n      _ref3$mergeMode = _ref3.mergeMode,\n      mergeMode = _ref3$mergeMode === void 0 ? 'after' : _ref3$mergeMode;\n\n  var compareArgs = function compareArgs(fieldArgs, connectionArgs) {\n    for (var key in connectionArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      } else if (!(key in fieldArgs)) {\n        return false;\n      }\n\n      var argA = fieldArgs[key];\n      var argB = connectionArgs[key];\n\n      if (typeof argA !== typeof argB || typeof argA !== 'object' ? argA !== argB : stringifyVariables(argA) !== stringifyVariables(argB)) {\n        return false;\n      }\n    }\n\n    for (var _key in fieldArgs) {\n      if (_key === offsetArgument || _key === limitArgument) {\n        continue;\n      }\n\n      if (!(_key in connectionArgs)) return false;\n    }\n\n    return true;\n  };\n\n  return function (_parent, fieldArgs, cache, info) {\n    var entityKey = info.parentKey,\n        fieldName = info.fieldName;\n    var allFields = cache.inspectFields(entityKey);\n    var fieldInfos = allFields.filter(function (info) {\n      return info.fieldName === fieldName;\n    });\n    var size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    var visited = new Set();\n    var result = [];\n    var prevOffset = null;\n\n    for (var i = 0; i < size; i++) {\n      var _fieldInfos$i = fieldInfos[i],\n          fieldKey = _fieldInfos$i.fieldKey,\n          args = _fieldInfos$i.arguments;\n\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      var links = cache.resolve(entityKey, fieldKey);\n      var currentOffset = args[offsetArgument];\n\n      if (links === null || links.length === 0 || typeof currentOffset !== 'number') {\n        continue;\n      }\n\n      var tempResult = [];\n\n      for (var j = 0; j < links.length; j++) {\n        var link = links[j];\n        if (visited.has(link)) continue;\n        tempResult.push(link);\n        visited.add(link);\n      }\n\n      if ((!prevOffset || currentOffset > prevOffset) === (mergeMode === 'after')) {\n        result = [].concat(_toConsumableArray(result), tempResult);\n      } else {\n        result = [].concat(tempResult, _toConsumableArray(result));\n      }\n\n      prevOffset = currentOffset;\n    }\n\n    var hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n\n    if (hasCurrentPage) {\n      return result;\n    } else if (!info.store.schema) {\n      return undefined;\n    } else {\n      info.partial = true;\n      return result;\n    }\n  };\n};\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: 'http://localhost:4000/graphql',\n    fetchOptions: {\n      credentials: 'include' // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n      //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      updates: {\n        Mutation: {\n          login: function login(_result, args, cache, info) {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, // the query to be updated\n            _result, function (result, query) {\n              // we are just defining the function here\n              //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          logout: function logout(_result, args, cache, info) {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, // the query to be updated\n            _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, // the query to be updated\n            _result, function (result, query) {\n              if (result.register.errors) {\n                return query; // if not register then return the current me query\n              } else {\n                return {\n                  me: result.register.user // user and errors are in mutation check it.\n                  // the user field in mutation is the same as me query\n\n                };\n              }\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n}; ///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","Router","dedupExchange","fetchExchange","pipe","tap","MeDocument","betterUpdateQuery","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","offsetArgument","mergeMode","compareArgs","fieldArgs","connectionArgs","key","limitArgument","argA","argB","stringifyVariables","_parent","cache","info","entityKey","parentKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","visited","Set","result","prevOffset","i","fieldKey","args","arguments","links","resolve","currentOffset","tempResult","j","link","has","push","add","hasCurrentPage","store","schema","partial","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","login","_result","query","errors","me","user","logout","register"],"mappings":"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","sourcesContent":["import { cacheExchange } from '@urql/exchange-graphcache'\nimport Router from 'next/router'\nimport { dedupExchange, Exchange, fetchExchange } from 'urql'\nimport { pipe, tap } from 'wonka'\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n} from '../generated/graphql'\nimport { betterUpdateQuery } from './betterUpdateQuery'\n\n// this is a global handler for errors\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/login') // this replace the current route\n      }\n    })\n  )\n}\n\nexport const cursorPagination = ({\n  offsetArgument = 'skip',\n  mergeMode = 'after',\n}: PaginationParams = {}): Resolver => {\n  const compareArgs = (\n    fieldArgs: Variables,\n    connectionArgs: Variables\n  ): boolean => {\n    for (const key in connectionArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue\n      } else if (!(key in fieldArgs)) {\n        return false\n      }\n\n      const argA = fieldArgs[key]\n      const argB = connectionArgs[key]\n\n      if (\n        typeof argA !== typeof argB || typeof argA !== 'object'\n          ? argA !== argB\n          : stringifyVariables(argA) !== stringifyVariables(argB)\n      ) {\n        return false\n      }\n    }\n\n    for (const key in fieldArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue\n      }\n      if (!(key in connectionArgs)) return false\n    }\n\n    return true\n  }\n\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info\n\n    const allFields = cache.inspectFields(entityKey)\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName)\n    const size = fieldInfos.length\n    if (size === 0) {\n      return undefined\n    }\n\n    const visited = new Set()\n    let result: NullArray<string> = []\n    let prevOffset: number | null = null\n\n    for (let i = 0; i < size; i++) {\n      const { fieldKey, arguments: args } = fieldInfos[i]\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue\n      }\n\n      const links = cache.resolve(entityKey, fieldKey) as string[]\n      const currentOffset = args[offsetArgument]\n\n      if (\n        links === null ||\n        links.length === 0 ||\n        typeof currentOffset !== 'number'\n      ) {\n        continue\n      }\n\n      const tempResult: NullArray<string> = []\n\n      for (let j = 0; j < links.length; j++) {\n        const link = links[j]\n        if (visited.has(link)) continue\n        tempResult.push(link)\n        visited.add(link)\n      }\n\n      if (\n        (!prevOffset || currentOffset > prevOffset) ===\n        (mergeMode === 'after')\n      ) {\n        result = [...result, ...tempResult]\n      } else {\n        result = [...tempResult, ...result]\n      }\n\n      prevOffset = currentOffset\n    }\n\n    const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs)\n    if (hasCurrentPage) {\n      return result\n    } else if (!(info as any).store.schema) {\n      return undefined\n    } else {\n      info.partial = true\n      return result\n    }\n  }\n}\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' as const, // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              (result, query) => {\n                // we are just defining the function here\n                //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n                if (result.login.errors) {\n                  return query\n                } else {\n                  return {\n                    me: result.login.user,\n                  }\n                }\n              }\n            )\n          },\n          logout: (_result, args, cache, info) => {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              () => {\n                return {\n                  me: null,\n                }\n              }\n            )\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query // if not register then return the current me query\n                } else {\n                  return {\n                    me: result.register.user, // user and errors are in mutation check it.\n                    // the user field in mutation is the same as me query\n                  }\n                }\n              }\n            )\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n})\n///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain\n"]},"metadata":{},"sourceType":"module"}