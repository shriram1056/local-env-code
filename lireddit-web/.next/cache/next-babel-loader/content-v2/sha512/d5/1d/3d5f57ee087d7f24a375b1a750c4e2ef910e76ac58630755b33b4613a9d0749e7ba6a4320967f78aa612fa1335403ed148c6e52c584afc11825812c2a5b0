{"ast":null,"code":"import _defineProperty from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/shriram/Downloads/lireddit/lireddit-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/lireddit/lireddit-web/src/components/inputField.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FormControl, FormErrorMessage, FormLabel, Input } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React from 'react';\n//!!error is to convert it to boolean.single wont help as it makes \"\"-true\n// '' =>false\n// \"sdsd\"=>true\nexport var InputField = function InputField(_ref) {\n  _s();\n\n  var label = _ref.label,\n      _ = _ref.size,\n      props = _objectWithoutProperties(_ref, [\"label\", \"size\"]);\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      error = _useField2[1].error;\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: !!error,\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: field.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread(_objectSpread({}, field), props), {}, {\n      id: field.name,\n      placeholder: props.placeholder\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, _this), error ? /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, _this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(InputField, \"DpPuTb9nPdu6NyyZR63Xu5KSrwc=\", false, function () {\n  return [useField];\n});\n\n_c = InputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/components/inputField.tsx"],"names":["FormControl","FormErrorMessage","FormLabel","Input","useField","React","InputField","label","_","size","props","field","error","name","placeholder"],"mappings":";;;;;;;;;;;;;AAAA,SACEA,WADF,EAEEC,gBAFF,EAGEC,SAHF,EAIEC,KAJF,QAKO,kBALP;AAMA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,MAA2C,OAA3C;AAQA;AACA;AACA;AACA,OAAO,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,OAI/C;AAAA;;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,MAFEC,CAEF,QAFJC,IAEI;AAAA,MADDC,KACC;;AAAA,kBACuBN,QAAQ,CAACM,KAAD,CAD/B;AAAA;AAAA,MACGC,KADH;AAAA,MACYC,KADZ,iBACYA,KADZ;;AAEJ,sBACE,QAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACA,KAA1B;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA,gBAAiCN;AAAjC;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,KAAD,gDACMI,KADN,GAEMD,KAFN;AAGE,MAAA,EAAE,EAAEC,KAAK,CAACE,IAHZ;AAIE,MAAA,WAAW,EAAEH,KAAK,CAACI;AAJrB;AAAA;AAAA;AAAA;AAAA,aAFF,EAQGF,KAAK,gBAAG,QAAC,gBAAD;AAAA,gBAAmBA;AAAnB;AAAA;AAAA;AAAA;AAAA,aAAH,GAAkD,IAR1D;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAYD,CAlBM;;GAAMN,U;UAKgBF,Q;;;KALhBE,U","sourcesContent":["import {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n} from '@chakra-ui/react'\nimport { useField } from 'formik'\nimport React, { InputHTMLAttributes } from 'react'\n\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  label: string\n  placeholder: string\n  name: string\n}\n\n//!!error is to convert it to boolean.single wont help as it makes \"\"-true\n// '' =>false\n// \"sdsd\"=>true\nexport const InputField: React.FC<InputFieldProps> = ({\n  label,\n  size: _,\n  ...props\n}) => {\n  const [field, { error }] = useField(props)\n  return (\n    <FormControl isInvalid={!!error}>\n      <FormLabel htmlFor={field.name}>{label}</FormLabel>\n      <Input\n        {...field}\n        {...props}\n        id={field.name}\n        placeholder={props.placeholder}\n      />\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}