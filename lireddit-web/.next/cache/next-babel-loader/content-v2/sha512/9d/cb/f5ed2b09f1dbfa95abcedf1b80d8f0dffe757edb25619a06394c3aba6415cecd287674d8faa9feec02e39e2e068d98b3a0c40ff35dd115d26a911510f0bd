{"ast":null,"code":"import { cacheExchange } from '@urql/exchange-graphcache';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nexport const createUrqlClien = ssrExchange => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: (_result, args, cache, info) => {\n          // result is the complete data of login mutation. this is used in replacement of Query me's data\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, // the query to be updated\n          _result, (result, query) => {\n            // we are just defining the function here\n            //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        logout: (_result, args, cache, info) => {\n          // result is the complete data of login mutation. this is used in replacement of Query me's data\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, // the query to be updated\n          _result, () => {\n            return {\n              me: null\n            };\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, // the query to be updated\n          _result, (result, query) => {\n            if (result.register.errors) {\n              return query; // if not register then return the current me query\n            } else {\n              return {\n                me: result.register.user // user and errors are in mutation check it.\n                // the user field in mutation is the same as me query\n\n              };\n            }\n          });\n        }\n      }\n    }\n  }), ssrExchange, fetchExchange]\n}); ///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain","map":{"version":3,"sources":["/home/shriram/Downloads/lireddit/lireddit-web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","MeDocument","betterUpdateQuery","createUrqlClien","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","login","_result","args","cache","info","query","result","errors","me","user","logout","register"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,MAA7C;AACA,SAGEC,UAHF,QAMO,sBANP;AAOA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAO,MAAMC,eAAe,GAAIC,WAAD,KAAkB;AAC/CC,EAAAA,GAAG,EAAE,+BAD0C;AAE/CC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE,SADD,CACqB;AACjC;;AAFY,GAFiC;AAM/CC,EAAAA,SAAS,EAAE,CACTT,aADS,EAETD,aAAa,CAAC;AACZW,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACrC;AACAb,UAAAA,iBAAiB,CACfY,KADe,EAEf;AAAEE,YAAAA,KAAK,EAAEf;AAAT,WAFe,EAEQ;AACvBW,UAAAA,OAHe,EAIf,CAACK,MAAD,EAASD,KAAT,KAAmB;AACjB;AACA;AACA,gBAAIC,MAAM,CAACN,KAAP,CAAaO,MAAjB,EAAyB;AACvB,qBAAOF,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLG,gBAAAA,EAAE,EAAEF,MAAM,CAACN,KAAP,CAAaS;AADZ,eAAP;AAGD;AACF,WAdc,CAAjB;AAgBD,SAnBO;AAoBRC,QAAAA,MAAM,EAAE,CAACT,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACtC;AACAb,UAAAA,iBAAiB,CACfY,KADe,EAEf;AAAEE,YAAAA,KAAK,EAAEf;AAAT,WAFe,EAEQ;AACvBW,UAAAA,OAHe,EAIf,MAAM;AACJ,mBAAO;AACLO,cAAAA,EAAE,EAAE;AADC,aAAP;AAGD,WARc,CAAjB;AAUD,SAhCO;AAiCRG,QAAAA,QAAQ,EAAE,CAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACxCb,UAAAA,iBAAiB,CACfY,KADe,EAEf;AAAEE,YAAAA,KAAK,EAAEf;AAAT,WAFe,EAEQ;AACvBW,UAAAA,OAHe,EAIf,CAACK,MAAD,EAASD,KAAT,KAAmB;AACjB,gBAAIC,MAAM,CAACK,QAAP,CAAgBJ,MAApB,EAA4B;AAC1B,qBAAOF,KAAP,CAD0B,CACb;AACd,aAFD,MAEO;AACL,qBAAO;AACLG,gBAAAA,EAAE,EAAEF,MAAM,CAACK,QAAP,CAAgBF,IADf,CACqB;AAC1B;;AAFK,eAAP;AAID;AACF,WAbc,CAAjB;AAeD;AAjDO;AADH;AADG,GAAD,CAFJ,EAyDThB,WAzDS,EA0DTJ,aA1DS;AANoC,CAAlB,CAAxB,C,CAmEP;AACA;AAEA","sourcesContent":["import { cacheExchange } from '@urql/exchange-graphcache'\nimport { dedupExchange, fetchExchange } from 'urql'\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n} from '../generated/graphql'\nimport { betterUpdateQuery } from './betterUpdateQuery'\n\nexport const createUrqlClien = (ssrExchange) => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' as const, // this is needed for server to send the cookie along with every request. you also need to add this in graphQL settings\n    //this will throw Cross-Origin Resource Sharing. if we didn't set the cors in server-side\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              (result, query) => {\n                // we are just defining the function here\n                //in the parameter we pass the LoginMuation and MeQuery object's type as argument\n                if (result.login.errors) {\n                  return query\n                } else {\n                  return {\n                    me: result.login.user,\n                  }\n                }\n              }\n            )\n          },\n          logout: (_result, args, cache, info) => {\n            // result is the complete data of login mutation. this is used in replacement of Query me's data\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              () => {\n                return {\n                  me: null,\n                }\n              }\n            )\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument }, // the query to be updated\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query // if not register then return the current me query\n                } else {\n                  return {\n                    me: result.register.user, // user and errors are in mutation check it.\n                    // the user field in mutation is the same as me query\n                  }\n                }\n              }\n            )\n          },\n        },\n      },\n    }),\n    ssrExchange,\n    fetchExchange,\n  ],\n})\n///point to out graphQL server\n//credentials: Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server.\n\n//'same-origin' as shown below, if your backend server is the same domain or else credentials: 'include' if your backend is a different domain\n"]},"metadata":{},"sourceType":"module"}